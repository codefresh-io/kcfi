{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "name": "Codefresh",
      "url": "https://www.codefresh.io"
    },
    "description": "Codefresh API openAPI 3.0 specification",
    "termsOfService": "https://codefresh.io/docs/docs/terms-and-privacy-policy/terms-of-service/",
    "title": "Codefresh API",
    "version": "0.0.2",
    "x-logo": {
      "url": "https://i.ibb.co/X7kg7jb/image.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Codefresh"
    }
  },
  "x-service-name": "api-public",
  "x-base-path": "/api",
  "x-internal-services": [
    "pipeline-manager",
    "api"
  ],
  "x-endpoint-conditions": [
    {
      "weight": 0,
      "condition": "global.has-general-service-role",
      "handlerRegex": "(.*)"
    }
  ],
  "servers": [
    {
      "url": "https://g.codefresh.io/api"
    }
  ],
  "security": [
    {
      "API-key": []
    }
  ],
  "x-filters": [
    {
      "pathRegex": "/builds/{serviceId}/",
      "methods": [
        "post"
      ]
    },
    {
      "pathRegex": "/builds/{buildId}/update",
      "methods": [
        "post"
      ]
    },
    {
      "tags": [
        "users",
        "firebase",
        "version",
        "payments"
      ]
    }
  ],
  "x-tagGroups": [
    {
      "name": "Pipelines / Builds",
      "tags": [
        "builds",
        "execution-contexts",
        "images",
        "pipelines",
        "projects",
        "step-types",
        "progress",
        "triggers",
        "triggers.events",
        "triggers.types",
        "annotations",
        "version",
        "firebase"
      ]
    },
    {
      "name": "Kubernetes / Helm",
      "tags": [
        "kubernetes",
        "helm.boards",
        "helm.charts",
        "helm.releases",
        "helm.sections",
        "environments-v2"
      ]
    },
    {
      "name": "Swarm",
      "tags": [
        "compositions",
        "environments"
      ]
    },
    {
      "name": "Integrations / Contexts",
      "tags": [
        "clusters",
        "contexts",
        "helm.repos",
        "helm.release-config",
        "registries",
        "repos"
      ]
    },
    {
      "name": "Account Management",
      "tags": [
        "abac",
        "accounts",
        "payments",
        "runtimeEnvs",
        "teams",
        "tokens",
        "users",
        "views",
        "agents"
      ]
    },
    {
      "name": "User Properties",
      "tags": [
        "favorites"
      ]
    },
    {
      "name": "On-Premise",
      "tags": [
        "features",
        "onPrem.runtimeEnvs",
        "onPrem.runtimeEnvs.account",
        "onPrem.runtimeEnvs.plan",
        "onPrem.runtimeEnvs.system"
      ]
    },
    {
      "name": "Platform Analytics",
      "tags": [
        "platform-analytics"
      ]
    }
  ],
  "tags": [
    {
      "name": "Pipelines",
      "description": "pipelines",
      "x-id": "pipelines"
    },
    {
      "name": "Projects",
      "description": "projects",
      "x-id": "projects"
    },
    {
      "name": "Views",
      "description": "views",
      "x-id": "views"
    },
    {
      "name": "Step-types",
      "description": "step-types",
      "x-id": "step-types"
    },
    {
      "name": "Builds",
      "description": "builds",
      "x-id": "builds"
    },
    {
      "name": "Contexts",
      "description": "contexts",
      "x-id": "contexts"
    },
    {
      "name": "Images",
      "description": "images",
      "x-id": "images"
    },
    {
      "name": "Triggers",
      "description": "Only for registry, helm and cron triggers",
      "x-id": "triggers"
    },
    {
      "name": "Triggers Types",
      "description": "triggers.types",
      "x-id": "triggers.types"
    },
    {
      "name": "Triggers Events",
      "description": "triggers.events",
      "x-id": "triggers.events"
    },
    {
      "name": "Annotations",
      "description": "annotations",
      "x-id": "annotations"
    },
    {
      "name": "Environments",
      "description": "environments",
      "x-id": "environments"
    },
    {
      "name": "Environments V2",
      "description": "environments v2",
      "x-id": "environments-v2"
    },
    {
      "name": "Gitops",
      "description": "Gitops",
      "x-id": "gitops"
    },
    {
      "name": "Compositions",
      "description": "compositions",
      "x-id": "compositions"
    },
    {
      "name": "Helm Charts",
      "description": "helm.charts",
      "x-id": "helm.charts"
    },
    {
      "name": "Helm Releases",
      "description": "helm.releases",
      "x-id": "helm.releases"
    },
    {
      "name": "Helm Repos",
      "description": "helm.repos",
      "x-id": "helm.repos"
    },
    {
      "name": "Helm Release Configs",
      "description": "helm.release-config",
      "x-id": "helm.release-config"
    },
    {
      "name": "Helm Boards",
      "description": "helm.boards",
      "x-id": "helm.boards"
    },
    {
      "name": "Helm Sections",
      "description": "helm.sections",
      "x-id": "helm.sections"
    },
    {
      "name": "Repos",
      "description": "repos",
      "x-id": "repos"
    },
    {
      "name": "Teams",
      "description": "teams",
      "x-id": "teams"
    },
    {
      "name": "Kubernetes",
      "description": "kubernetes",
      "x-id": "kubernetes"
    },
    {
      "name": "Version",
      "description": "version",
      "x-id": "version"
    },
    {
      "name": "Firebase",
      "description": "firebase",
      "x-id": "firebase"
    },
    {
      "name": "Users",
      "description": "users",
      "x-id": "users"
    },
    {
      "name": "Runtime Environments",
      "description": "runtimeEnvs",
      "x-id": "runtimeEnvs"
    },
    {
      "name": "Registries",
      "description": "registries",
      "x-id": "registries"
    },
    {
      "name": "Progress",
      "description": "progress",
      "x-id": "progress"
    },
    {
      "name": "Payments",
      "description": "payments",
      "x-id": "payments"
    },
    {
      "name": "Providers",
      "description": "providers",
      "x-id": "providers"
    },
    {
      "name": "Features",
      "description": "features",
      "x-id": "features"
    },
    {
      "name": "Clusters",
      "description": "clusters",
      "x-id": "clusters"
    },
    {
      "name": "Tokens",
      "description": "tokens",
      "x-id": "tokens"
    },
    {
      "name": "Agents",
      "description": "Manage and serve Codefresh Runners",
      "externalDocs": {
        "url": "https://codefresh.io/docs/docs/administration/codefresh-runner/"
      },
      "x-id": "agents"
    },
    {
      "name": "Runtime Environments.",
      "description": "onPrem.runtimeEnvs",
      "x-id": "onPrem.runtimeEnvs"
    },
    {
      "name": "Runtime Environments (Plan)",
      "description": "onPrem.runtimeEnvs.plan",
      "x-id": "onPrem.runtimeEnvs.plan"
    },
    {
      "name": "Runtime Environments (System)",
      "description": "onPrem.runtimeEnvs.system",
      "x-id": "onPrem.runtimeEnvs.system"
    },
    {
      "name": "Runtime Environments (Account)",
      "description": "onPrem.runtimeEnvs.account",
      "x-id": "onPrem.runtimeEnvs.account"
    },
    {
      "name": "Accounts",
      "description": "accounts",
      "x-id": "accounts"
    },
    {
      "name": "Abac",
      "description": "abac",
      "x-id": "abac"
    },
    {
      "name": "Approval",
      "description": "Approval",
      "x-id": "approval"
    },
    {
      "name": "Audit",
      "description": "Audit",
      "x-id": "audit"
    },
    {
      "name": "Platform Analytics",
      "description": "Platform Analytics",
      "x-id": "platform-analytics"
    },
    {
      "name": "Execution Contexts",
      "description": "Execution Contexts",
      "x-id": "execution-contexts"
    }
  ],
  "paths": {
    "/abac": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-list",
        "summary": "List rules",
        "parameters": [],
        "x-sdk-interface": "abac.rules.list"
      },
      "post": {
        "x-action": "createGrantRule",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "action": {
                    "type": "string"
                  },
                  "resource": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create rule",
        "parameters": [],
        "x-sdk-interface": "abac.rules.create"
      }
    },
    "/abac/batch": {
      "post": {
        "x-action": "updateRules",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create-or-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "create": {
                    "items": {
                      "$ref": "#/components/schemas/abac"
                    },
                    "type": "array"
                  },
                  "delete": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create or delete rules",
        "parameters": [],
        "x-sdk-interface": "abac.rules.createOrDelete"
      }
    },
    "/abac/resource/{resource}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-list-by-resource",
        "summary": "Get rules by resource",
        "x-sdk-interface": "abac.rules.listByResource"
      }
    },
    "/abac/tags/rule/{rule}": {
      "post": {
        "x-action": "updateRule",
        "x-entityId": {
          "pathId": "params.rule",
          "pathName": "body.tags[0]"
        },
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-tags-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update rule tags",
        "x-sdk-interface": "abac.rules.tags.update"
      }
    },
    "/abac/tags/rules": {
      "post": {
        "x-action": "updateTagsForRules",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-tags-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "rules": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create rules tags",
        "parameters": [],
        "x-sdk-interface": "abac.rules.tags.create"
      }
    },
    "/abac/team/{teamId}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-list-by-team",
        "summary": "Get rules by team id",
        "x-sdk-interface": "abac.rules.listByTeam"
      }
    },
    "/abac/teamRules": {
      "post": {
        "x-action": "createRulesForTeam",
        "x-entityId": {
          "pathName": "body.teams[0]"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create-in-batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/abac"
              }
            }
          },
          "required": true
        },
        "summary": "Create rules in batch",
        "parameters": [],
        "x-sdk-interface": "abac.rules.createInBatch"
      }
    },
    "/abac/{rule}": {
      "delete": {
        "x-action": "deleteRuleForTeam",
        "x-entityId": {
          "pathName": "params.rule"
        },
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-delete",
        "summary": "Delete rule",
        "x-sdk-interface": "abac.rules.delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-get",
        "summary": "Get rule",
        "x-sdk-interface": "abac.rules.get"
      }
    },
    "/github-action": {
      "get": {
        "parameters": [
          {
            "description": "The name of github action",
            "in": "query",
            "name": "text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "github-action",
        "summary": "List of github actions",
        "x-sdk-interface": "Should return list of contexts by search query",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "github-action.getActions"
        }
      }
    },
    "/github-action/context/{id}": {
      "get": {
        "parameters": [
          {
            "description": "The id of github action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "github-action-context",
        "summary": "Github action context",
        "x-sdk-interface": "Should return context by id",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "github-action.getActionContext"
        }
      }
    },
    "/analytics/*": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "platform-analytics"
        ],
        "operationId": "platform-analytics-get",
        "summary": "Get platform analytics",
        "x-sdk-interface": "platformAnalytics.not-usable",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "platform-analytics.proxyAll"
        }
      }
    },
    "/analytics/reports/{reportName}": {
      "get": {
        "tags": [
          "platform-analytics"
        ],
        "operationId": "get-analytics-report",
        "x-sdk-interface": "analytics.reports",
        "summary": "Get analytics report by name",
        "parameters": [
          {
            "$ref": "#/components/parameters/path_reportName"
          },
          {
            "$ref": "#/components/parameters/query_granularity"
          },
          {
            "$ref": "#/components/parameters/query_dateRange"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/analytics/metadata": {
      "get": {
        "tags": [
          "platform-analytics"
        ],
        "operationId": "get-analytics-metadata",
        "x-sdk-interface": "analytics.metadata",
        "summary": "Get all analytics metadata",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/accounts/{accountId}": {
      "delete": {
        "x-action": "removeUserFromAccount",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Request account deletion",
        "operationId": "request-delete-accounts",
        "summary": "Request account deletion",
        "x-sdk-interface": "accounts.requestDelete"
      }
    },
    "/accounts/{accountId}/{userId}": {
      "delete": {
        "x-action": "removeUserFromAccount",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-delete-user-from-account",
        "summary": "Delete user from account",
        "x-sdk-interface": "accounts.deleteUserFromAccount"
      }
    },
    "/accounts/{accountId}/{userId}/resendInvite": {
      "post": {
        "x-action": "resendInviteToUser",
        "x-entityId": "params.accountId",
        "operationId": "accounts-resend-invite",
        "tags": [
          "accounts"
        ],
        "summary": "Resend invite",
        "x-sdk-interface": "accounts.resendInvite",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/accounts/{accountId}/{userId}/adduser": {
      "post": {
        "x-action": "addExistingUserToAccount",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-add-existing-user-to-account",
        "summary": "Add existing user to account",
        "x-sdk-interface": "accounts.addExistingUserToAccount"
      }
    },
    "/accounts/{accountId}/{userId}/admin": {
      "delete": {
        "x-entityId": "params.accountId",
        "x-action": "removeUserFromAdmins",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-delete-admin",
        "summary": "Delete admin",
        "x-sdk-interface": "accounts.deleteAdmin"
      },
      "post": {
        "x-entityId": "params.accountId",
        "x-action": "makeUserAdmin",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-set-as-admin",
        "summary": "Set as admin",
        "x-sdk-interface": "accounts.setAsAdmin"
      }
    },
    "/accounts/{accountId}/adduser": {
      "post": {
        "x-action": "addUserToAccount",
        "x-entityId": "body.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Adds a not existing user to an account. the provider field is optional and if not provided it will be taken from the account model",
        "operationId": "accounts-add-user-to-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userDetails": {
                    "type": "string",
                    "description": "User email or existing Codefresh user name"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Add user to account",
        "x-sdk-interface": "accounts.addUserToAccount"
      }
    },
    "/accounts/{accountId}/update": {
      "post": {
        "x-action": "updateAccount",
        "x-entityId": {
          "pathId": "params.accountId",
          "pathName": "body.name"
        },
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet: update the user defined account fields. Receives a settings object (will be defined later)",
        "operationId": "accounts-update-account-public-settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "integrations": {
                    "type": "object",
                    "x-secure": true
                  },
                  "notifications": {
                    "items": {
                      "properties": {
                        "events": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "slack": {
                          "properties": {
                            "uri": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "enum": [
                            "webhook",
                            "slack"
                          ],
                          "type": "string"
                        },
                        "webhook": {
                          "properties": {
                            "method": {
                              "type": "string"
                            },
                            "uri": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update account public settings",
        "x-sdk-interface": "accounts.updateAccountPublicSettings"
      }
    },
    "/accounts/{accountId}/{userId}/updateuser": {
      "post": {
        "x-action": "updateUserByAdmin",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-update-user-details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "logins": {
                    "type": "object",
                    "x-secure": true
                  },
                  "key": {
                    "type": "object",
                    "x-secure": true
                  },
                  "settings": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update user details",
        "x-sdk-interface": "accounts.updateUserDetails"
      }
    },
    "/accounts/{accountId}/users": {
      "get": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "List users of an account",
        "operationId": "accounts-get-users-for-account",
        "summary": "Get users for account",
        "x-sdk-interface": "accounts.getUsersForAccount"
      }
    },
    "/admin/accounts": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "get all the accounts in the system",
        "operationId": "accounts-list-accounts",
        "summary": "List accounts",
        "parameters": [],
        "x-sdk-interface": "accounts.listAccounts"
      },
      "post": {
        "x-action": "createAccount",
        "x-audit": {
          "name": {
            "path": "name",
            "source": "res"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Add new account. Receives an account object ",
        "operationId": "accounts-add-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add account",
        "parameters": [],
        "x-sdk-interface": "accounts.addAccount"
      }
    },
    "/admin/accounts/archive/list": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts.getArchiveList"
        ],
        "operationId": "get-archive-list",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "account id"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "accounts.getArchiveList"
      }
    },
    "/admin/accounts/addpendinguser": {
      "post": {
        "x-action": "addPendingUser",
        "x-audit": {
          "name": {
            "path": "body.email",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-add-pending-user-without-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "account": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "provider": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "userName": {
                    "type": "string"
                  }
                },
                "required": [
                  "userName",
                  "provider"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add pending user without account",
        "parameters": [],
        "x-sdk-interface": "accounts.addPendingUserWithoutAccount"
      }
    },
    "/admin/accounts/{accountId}": {
      "delete": {
        "x-action": "deleteAccount",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-delete-account",
        "summary": "Delete account",
        "x-sdk-interface": "accounts.deleteAccount"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Get an account by id",
        "operationId": "accounts-get-by-id",
        "summary": "Get by id",
        "x-sdk-interface": "accounts.getById"
      }
    },
    "/admin/accounts/{accountId}/segment/{segmentType}": {
      "post": {
        "x-sdk-interface": "accounts.setSegment",
        "x-action": "setSegment",
        "x-entityId": {
          "pathName": "params.segmentType"
        },
        "operationId": "accounts-set-segment",
        "tags": [
          "accounts",
          "segment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/segmentType"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "trial": {
                    "type": "object",
                    "properties": {
                      "trialing": {
                        "type": "boolean"
                      },
                      "trialWillEndNotified": {
                        "type": "boolean"
                      },
                      "trialEndedNotified": {
                        "type": "boolean"
                      },
                      "type": {
                        "type": "string"
                      },
                      "previousSegment": {
                        "type": "string"
                      },
                      "trialEnd": {
                        "type": "string"
                      },
                      "trialStart": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Set account segment"
      }
    },
    "/admin/accounts/{id}/update": {
      "post": {
        "x-action": "updateAccount",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.accountDetails.name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet: Update the account info that only codefresh admins (codefresh employees, not account admin) can access",
        "operationId": "accounts-update-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountDetails": {
                    "type": "object",
                    "properties": {
                      "integrations": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update account",
        "x-sdk-interface": "accounts.updateAccount"
      }
    },
    "/admin/accounts/{id}/rename": {
      "post": {
        "x-action": "renameAccount",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-update-account-by-admin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integrations": {
                    "type": "object",
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Rename account",
        "x-sdk-interface": "accounts.renameAccountByAdmin"
      }
    },
    "/admin/runtime-environments": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs"
        ],
        "operationId": "onPrem-runtimeEnvs-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "accountIds",
            "schema": {
              "type": "string"
            },
            "description": "Account ids"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "onPrem.runtimeEnvs.list"
      }
    },
    "/admin/runtime-environments/account/default/{account}/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "setDefaultRuntimeEnvByAdminToAccount",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Account"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Set default for account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.setDefault"
      }
    },
    "/admin/runtime-environments/account/modify/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "addRuntimeEnvToAccountByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-modify",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Add to account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.modify"
      },
      "delete": {
        "x-action": "removeRuntimeEnvFromAccountByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-delete",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Delete for account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.delete"
      }
    },
    "/admin/runtime-environments/account/{account}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-list",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Account"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "accountIds",
            "schema": {
              "type": "string"
            },
            "description": "Account ids"
          }
        ],
        "summary": "Get by account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.list"
      }
    },
    "/admin/runtime-environments/default/{plan}/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "setDefaultRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Plan"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Set default",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.setDefault"
      }
    },
    "/admin/runtime-environments/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-update",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "description": "Runtime environment name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "extend",
            "description": "Extend or not",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "description": "Description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.update"
      },
      "delete": {
        "x-action": "deleteRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-delete",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            },
            "description": "Force"
          }
        ],
        "summary": "Delete sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.delete"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-get",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Version"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            },
            "description": "History"
          },
          {
            "in": "query",
            "name": "successors",
            "schema": {
              "type": "string"
            },
            "description": "Successors"
          }
        ],
        "summary": "Get sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.get"
      }
    },
    "/admin/runtime-environments/{plan}/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnvByAdmin",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-update",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Plan"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Description"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.update"
      },
      "delete": {
        "x-action": "deleteRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-delete",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Plan"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            },
            "description": "Force"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.delete"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-get",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Plan"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Version"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            },
            "description": "History"
          },
          {
            "in": "query",
            "name": "successors",
            "schema": {
              "type": "string"
            },
            "description": "Successors"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.get"
      }
    },
    "/admin/runtime-environments/health-check": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs.health-check"
        ],
        "operationId": "onPrem.runtimeEnvs.health-check.post",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Report health-check",
        "description": "Serve to receive health-check reports from runtime environment clusters",
        "x-sdk-interface": "onPrem.runtimeEnvs.reportHealthCheck"
      }
    },
    "/admin/user/{userName}": {
      "delete": {
        "x-action": "deleteUser",
        "x-entityId": {
          "pathName": "params.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-delete",
        "parameters": [
          {
            "in": "path",
            "name": "userName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User name"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "user.delete"
      }
    },
    "/admin/user/adminRole": {
      "post": {
        "x-action": "changeAdminRole",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-change-admin-role",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Change role",
        "x-sdk-interface": "user.changeRole"
      }
    },
    "/admin/user/account": {
      "post": {
        "x-action": "changeUserAccount",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-change-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Json"
                    },
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Change account",
        "x-sdk-interface": "user.changeAccount"
      }
    },
    "/admin/user/loginAsUser": {
      "get": {
        "x-action": "loginAsUser",
        "x-audit": {
          "id": {
            "path": "query.userId"
          },
          "name": {
            "path": "user.userName",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "login-as-user",
        "summary": "Login as another user",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "the user id"
          }
        ],
        "x-sdk-interface": "user.loginAsUser"
      }
    },
    "/admin/user/localProvider": {
      "delete": {
        "x-action": "deleteLocalProvider",
        "x-entityId": {
          "pathName": "query.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-delete-local-provider",
        "summary": "Delete local provider",
        "x-sdk-interface": "user.deleteLocalProvider"
      },
      "post": {
        "x-action": "updateLocalProviderPassword",
        "x-entityId": {
          "pathName": "request.body.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-update-local-provider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Update local provider",
        "x-sdk-interface": "user.updateLocalProvider"
      }
    },
    "/admin/user/{userId}/activate": {
      "post": {
        "x-action": "activateUser",
        "x-entityId": "params.userId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-activate-user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User ID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Activate user",
        "x-sdk-interface": "user.activate.user"
      }
    },
    "/admin/idp": {
      "post": {
        "x-action": "createIDP",
        "x-audit": {
          "name": {
            "path": "body.clientName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "idp"
        ],
        "operationId": "idp-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                    "clientName",
                    "clientType"
                  ]
                }
              }
            }
          }
        },
        "summary": "Create IDP",
        "x-sdk-interface": "idp.create"
      },
      "put": {
        "x-action": "updateIDP",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.clientName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "idp"
        ],
        "operationId": "idp-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                    "clientName",
                    "clientType"
                  ]
                }
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "idp.update"
      }
    },
    "/admin/idp/addAccount": {
      "post": {
        "x-action": "addAccountToIDP",
        "x-entityId": "body.IDPConfigId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "idp"
        ],
        "operationId": "idp-add-account",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add to account",
        "x-sdk-interface": "idp.add-account"
      }
    },
    "/admin/idp/{id}": {
      "delete": {
        "x-action": "deleteIDP",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "idp"
        ],
        "operationId": "idp-delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "idp id"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "idp.delete"
      }
    },
    "/admin/analytic/addAccount": {
      "put": {
        "x-action": "addAccountToAnalytic",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "analytic"
        ],
        "operationId": "analytic-add-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                    "name"
                  ]
                }
              }
            }
          }
        },
        "summary": "Add account",
        "x-sdk-interface": "analytic.add.account"
      }
    },
    "/admin/customers": {
      "post": {
        "x-action": "createCustomer",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "x-sdk-interface": "customers.create"
      }
    },
    "/admin/customers/{customerId}/{accountId}/assignAccountToCustomer": {
      "post": {
        "x-action": "assignAccountToCustomer",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-assign-account",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Assign account",
        "x-sdk-interface": "customers.assignAccount"
      }
    },
    "/admin/customers/{customerId}/updateCustomerLimits": {
      "put": {
        "x-action": "updateCustomerLimits",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-update-limits",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update limits",
        "x-sdk-interface": "customers.updateLimits"
      }
    },
    "/admin/customers/{customerId}/{accountId}/detachAccountFromCustomer": {
      "post": {
        "x-action": "detachAccountFromCustomer",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-detach-account",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Detach account",
        "x-sdk-interface": "customers.detachAccount"
      }
    },
    "/admin/customers/{customerId}/{userId}/addCustomerAdmin": {
      "post": {
        "x-action": "addCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-add-admin",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add admit",
        "x-sdk-interface": "customers.addAdmin"
      }
    },
    "/admin/customers/{customerId}/{userId}/removeCustomerAdmin": {
      "post": {
        "x-action": "removeCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-remove-admin",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Remove admin",
        "x-sdk-interface": "customers.removeAdmin"
      }
    },
    "/admin/payments/{account_id}/REGroup/{REGroup}": {
      "post": {
        "x-action": "changeREGroup",
        "x-entityId": "params.account_id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-change-reg-group",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          },
          {
            "in": "path",
            "name": "REGroup",
            "schema": {
              "type": "string"
            },
            "description": "REGroup",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": []
                }
              }
            }
          }
        },
        "summary": "Change REG group",
        "x-sdk-interface": "payments.changeREGGroup"
      }
    },
    "/admin/payments/{account_id}/REGroup": {
      "delete": {
        "x-action": "deleteREGroup",
        "x-entityId": "params.account_id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-delete-reg-group",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "description": "Account name",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": []
                }
              }
            }
          }
        },
        "summary": "Delete REG group",
        "x-sdk-interface": "payments.deleteREGGroup"
      }
    },
    "/admin/approval/approve": {
      "post": {
        "x-action": "submitApproval",
        "x-entityId": "body._id",
        "x-overrides": [
          "addResponseBody"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "approval"
        ],
        "operationId": "approval-submit-aproval",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Submit approval",
        "x-sdk-interface": "approval.submitApproval"
      }
    },
    "/favorites": {
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "favorites"
        ],
        "operationId": "favorites-delete",
        "summary": "Delete favorite entities",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/create_favoriteOptions"
        },
        "x-sdk-interface": "favorites.delete"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "favorites"
        ],
        "operationId": "favorites-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_favoriteOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "favorites.create"
      }
    },
    "/favorites/{type}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "repo",
                          "pipeline-branch",
                          "step-type"
                        ],
                        "type": "string"
                      },
                      "data": {
                        "type": "object"
                      },
                      "entities": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Favorites objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "favorites"
        ],
        "operationId": "favorites-list",
        "summary": "List",
        "parameters": [
          {
            "description": "Entity type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "repo",
                "pipeline-branch",
                "step-type"
              ],
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "favorites.list"
      }
    },
    "/favorites/type/{type}/entity/{entityId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "repo",
                          "pipeline-branch",
                          "step-type"
                        ],
                        "type": "string"
                      },
                      "data": {
                        "type": "object"
                      },
                      "entities": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Favorites objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "favorites"
        ],
        "operationId": "favorites-getById",
        "summary": "getById",
        "parameters": [
          {
            "description": "Entity type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "repo",
                "pipeline-branch",
                "step-type"
              ],
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "path",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "favorites.getById"
      }
    },
    "/annotations": {
      "delete": {
        "x-action": "deleteAnnotations",
        "x-entityId": {
          "pathId": "query.entityId",
          "handlerName": "getAnnotationKey",
          "pathName": "query"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-delete",
        "summary": "Delete annotations",
        "parameters": [
          {
            "description": "id of annotation",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "query",
            "name": "entityId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity type",
            "in": "query",
            "name": "entityType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "key of annotation",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "annotations.delete"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "entityId": {
                        "type": "string"
                      },
                      "entityType": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Annotations objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-list",
        "summary": "List",
        "parameters": [
          {
            "description": "id of annotation",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "query",
            "name": "entityId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity type",
            "in": "query",
            "name": "entityType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "key of annotation",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "annotations.list"
      },
      "post": {
        "x-action": "createAnnotations",
        "x-entityId": {
          "pathId": "body.entityId",
          "handlerName": "getAnnotationKey",
          "pathName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "entityId": {
                      "type": "string"
                    },
                    "entityType": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Annotation object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_annotationOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "annotations.create"
      }
    },
    "/annotations/metadata": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "set": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "unset": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Annotation object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-create-metadata",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_annotation_manyOptions"
        },
        "summary": "Create many",
        "parameters": [],
        "x-sdk-interface": "annotations.createMany"
      }
    },
    "/auth/key": {
      "post": {
        "x-action": "createApiKey",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-generate",
        "parameters": [
          {
            "in": "query",
            "name": "subjectType",
            "schema": {
              "type": "string"
            },
            "description": "Subject type"
          },
          {
            "in": "query",
            "name": "subjectReference",
            "schema": {
              "type": "string"
            },
            "description": "Subject reference"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Generate",
        "x-sdk-interface": "tokens.generate",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "api-keys",
              "scope": "create"
            }
          },
          "preMiddleware": [
            "auth.hasEnoughScopeToChangeScope"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "api-key.createNewToken"
        }
      }
    },
    "/auth/key/{id}": {
      "delete": {
        "x-action": "deleteApiKey",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "tokens.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "api-keys",
              "scope": "delete"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "api-key.deleteToken"
        }
      },
      "patch": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-patch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "build id",
            "required": true
          }
        ],
        "summary": "Patch",
        "x-sdk-interface": "tokens.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "api-keys",
              "scope": "update"
            }
          },
          "preMiddleware": [
            "auth.hasEnoughScopeToChangeScope"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "api-key.patchToken"
        }
      },
      "get": {
        "x-action": "getTokenById",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-get-by-id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "tokens.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "api-keys",
              "scope": "read"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "api-key.getTokenById"
        }
      }
    },
    "/auth/keys": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "tokens.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "api-keys",
              "scope": "read"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "api-key.getTokens"
        }
      }
    },
    "/audit": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "audit"
        ],
        "operationId": "audit-list",
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by user name"
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by codefresh user id"
          },
          {
            "name": "entity",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api entity, example: pipeline, account"
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api entity id, this value different for each action, example: email, user id"
          },
          {
            "name": "action",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api action, get possible values on /api/audit/entitiesList, you will see only actions which was happen in your account"
          },
          {
            "name": "rs_status",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by response status code"
          },
          {
            "name": "showTriggers",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "returns only actions related to receiving triggers"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by searching substring in request body or query or params or headers or url"
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by date, value is number of milliseconds since 1970"
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by date, value is number of milliseconds since 1970"
          },
          {
            "name": "sortField",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "name of sorting field, values: id, createdAt, updatedAt"
          },
          {
            "name": "sortType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "sorting type, values: ASK, DESK"
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "quantity of returned results, range: 1-1000, default: 10"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page number, default:0"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "audit.list"
      }
    },
    "/audit/users": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "audit"
        ],
        "operationId": "audit-user-filter",
        "parameters": [
        ],
        "summary": "UserFilter",
        "x-sdk-interface": "audit.usersFilter"
      }
    },
    "/audit/entitiesList": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "audit"
        ],
        "operationId": "audit-entities-filter",
        "parameters": [
        ],
        "summary": "EntitiesFilter",
        "x-sdk-interface": "audit.getEntitiesList"
      }
    },
    "/audit/download": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "audit",
          "download"
        ],
        "operationId": "audit-download",
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by user name"
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by codefresh user id"
          },
          {
            "name": "entity",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api entity, example: pipeline, account"
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api entity id, this value different for each action, example: email, user id"
          },
          {
            "name": "action",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api action, get possible values on /api/audit/entitiesList, you will see only actions which was happen in your account"
          },
          {
            "name": "rs_status",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by response status code"
          },
          {
            "name": "showTriggers",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "returns only actions related to receiving triggers"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by searching substring in request body or query or params or headers or url"
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by date, value is number of milliseconds since 1970"
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by date, value is number of milliseconds since 1970"
          },
          {
            "name": "sortField",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "name of sorting field, values: id, createdAt, updatedAt"
          },
          {
            "name": "sortType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "sorting type, values: ASK, DESK"
          }
        ],
        "summary": "Download",
        "x-sdk-interface": "audit.download",
        "x-endpoint": {
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "audit.download"
        }
      }
    },

    "/workflow": {
      "get": {
        "operationId": "workflows-list",
        "parameters": [
          {
            "name": "X-Pagination-Session-Id",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Uniq identifier of the pagination session"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Amount of the workflows in the response for each page"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Page number"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "description": "Filter by workflow status"
          },
          {
            "name": "trigger",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "enum": [
                "build",
                "promote",
                "helm-delete-release",
                "helm-install-chart",
                "helm-promote",
                "helm-rollback"
              ]
            },
            "description": "Filter by workflow trigger reason, 'build' is default"
          },
          {
            "name": "pipeline",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "description": "Filter by pipeline id"
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "enum": [
                "github",
                "gitlab",
                "azure-devops",
                "bitbucket",
                "bitbucket-server",
                "stash",
                "google-cloud-sr"
              ]
            },
            "description": "Filter by git provider"
          },
          {
            "name": "repoName",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "example": "docs"
            },
            "description": "Filter by git repository name"
          },
          {
            "name": "repoOwner",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "example": "codefresh-io"
            },
            "description": "Filter by git repository owner"
          },
          {
            "name": "revision",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "description": "Filter by revision SHA"
          },
          {
            "name": "branchName",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "description": "Filter by branch name"
          },
          {
            "name": "pipelineTriggerId",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "description": "Filter by pipeline trigger id"
          },
          {
            "name": "committer",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "description": "Filter by committer username"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflows": {
                      "type": "object",
                      "properties": {
                        "docs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/workflow"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/pagination"
                    }
                  },
                  "example": {
                    "workflows": {
                      "docs": [
                        {
                          "project": "codefresh-io/docs",
                          "projectId": "5c98d438bd5b6f**********",
                          "serviceId": "5d4831c411b885**********",
                          "serviceName": "e2e",
                          "pipelineName": "codefresh-io/docs",
                          "pipelineTriggerId": "5d4aaefa11b885**********",
                          "pipelineTriggerName": "e2e",
                          "triggersCount": 5,
                          "repoOwner": "codefresh-io",
                          "repoName": "cf-helm",
                          "id": "602d23ce8d78ab**********",
                          "created": "2021-02-17T14:10:22.301Z",
                          "started": "2021-02-17T14:10:28.669Z",
                          "delayed": 0,
                          "status": "running",
                          "pendingLicense": false,
                          "progress": "602d23ce8d78ab**********",
                          "request": "602d23ce8d78ab**********",
                          "trigger": "build",
                          "triggeredBy": "55ddd0ccff2054**********",
                          "webhookTriggered": false,
                          "triggerType": "GIT",
                          "account": "5672d8deb6724b**********",
                          "autoGeneratedYaml": false,
                          "terminationRequest": [],
                          "systemEvents": [],
                          "finalWorkflowYaml": "<Pipeline yaml listed here>",
                          "hasExtendedYaml": true,
                          "runtime": {},
                          "exportedVariables": {},
                          "pendingApprovals": [],
                          "useDebugger": false,
                          "initiator": "codefresh-io",
                          "initiatorAvatar": "https://avatars1.githubusercontent.com/u/**********?v=4",
                          "hasImplicitGitCloneStep": false,
                          "packId": "5cd1746817313f**********",
                          "keepPVCsForPendingApproval": false,
                          "pendingApprovalConcurrencyApplied": false,
                          "userYamlDescriptor": "<Pipeline yaml listed here>",
                          "committer": "Codefresh",
                          "committerAvatar": "",
                          "eventName": "github: Push commits",
                          "eventLabel": "Push commits",
                          "revision": "2c2ad86cbe0726277b1747d4731661**********",
                          "branchName": "master",
                          "commitMessage": "[codefresh-io/docs#***]",
                          "repoURL": "https://github.com/codefresh-io/**********",
                          "commitURL": "https://github.com/codefresh-io/**********/commit/2c2ad86cbe0726277b1747d4731661**********",
                          "branchURL": "https://github.com/codefresh-io/**********/tree/master",
                          "provider": "github",
                          "event": "push",
                          "steps": [
                            "Initializing Process",
                            "e2e_init",
                            "helm_clone",
                            "prepare",
                            "ui_clone",
                            "api_clone"
                          ]
                        }
                      ]
                    },
                    "pagination": {
                      "sessionId": "username:codefresh-io",
                      "page": 1,
                      "pageSize": 12,
                      "firstId": "602d23ce8d78ab**********",
                      "lastId": "602cfaba5ac585**********",
                      "nextPage": true,
                      "prevPage": false
                    }
                  }
                }
              }
            }
          },
          "400":  {
            "description": "Request error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "code": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "status": 400,
                    "code": "7901",
                    "name": "PAGINATION_BAD_REQUEST_ERROR",
                    "message": "Requested page is out of the pagination session order"
                  }
                }
              }
            }
          },
          "500":  {
            "description": "Internal server error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "code": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "status": 500,
                    "code": "1001",
                    "name": "INTERNAL_SERVER_ERROR",
                    "message": "Internal server error"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "List",
        "description": "Get builds in a pageable way",
        "x-sdk-interface": "workflows.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated",
              "pagination.preparePaginationSession"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.getAllExistingWorkflowProcesses"
        }
      }
    },
    "/workflow/totalDelayTime": {
      "get": {
        "operationId": "workflows-get-total-delay-time",
        "parameters": [
          {
            "name": "account",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "account id"
          },
          {
            "name": "lte",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "end date"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "x-hide": true,
        "summary": "Get total delay time",
        "x-sdk-interface": "workflows.getTotalDelayTime",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.getTotalDelayTime"
        }
      }
    },
    "/workflow/buildsCount": {
      "get": {
        "operationId": "workflows-get-builds-count",
        "parameters": [
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Get builds count",
        "x-hide": true,
        "x-sdk-interface": "workflows.getBuildsCount",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.getBuildsCount"
        }
      }
    },
    "/workflow/isAccountHasBuilds": {
      "get": {
        "operationId": "workflows-is-account-has-builds",
        "parameters": [
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Check if account has builds",
        "x-hide": true,
        "x-sdk-interface": "workflows.isAccountHasBuilds",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.isAccountHasBuilds"
        }
      }
    },
    "/workflow/reservedEnvList": {
      "get": {
        "operationId": "workflows-get-reserved-env-list",
        "parameters": [
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Get reserved env list",
        "x-hide": true,
        "x-sdk-interface": "workflows.getReservedEnvList",
        "x-endpoint": {
          "auth": {
            "acl": {
              "resource": "build"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getReservedEnvList"
        }
      }
    },
    "/workflow/{requestId}/status": {
      "get": {
        "operationId": "workflows-status",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Request ID of the workflow",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "The current status of the build",
                    "value": "success"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "notFoundResponse": {
                    "summary": "Error message",
                    "value": "NotFoundError: Unable to find workflow with request ID: 5e4a7dfb217860**********"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Get status",
        "description": "Get build status by request id",
        "x-sdk-interface": "workflows.status",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build",
              "scope": "read:status",
              "description": "Read access to build status"
            }
          },
          "handler": "workflow.getWorkflowStatusByRequestId"
        }
      }
    },
    "/workflow/{requestId}/logs": {
      "get": {
        "operationId": "workflows-redirect-to-logs",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "request id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Redirect to logs",
        "x-sdk-interface": "workflows.redirectToLogs",
        "x-hide": true,
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.redirectToLogs"
        }
      }
    },

    "/workflow/{workflowId}/context-revision": {
      "get": {
        "operationId": "get-context-revision",
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          },
          {
            "name": "final",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "final"
          },
          {
            "name": "restartable",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "restartable"
          },
          {
            "name": "step",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "step"
          },
          {
            "name": "event",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "event"
          },
          {
            "name": "revision",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "revision"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "x-hide": true,
        "summary": "Get context revision",
        "x-sdk-interface": "workflows.getWorkflowContextRevision",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getWorkflowContextRevision"
        }
      }
    },
    "/workflow/{workflowId}/data": {
      "get": {
        "x-hide": true,
        "operationId": "get-workflow-data",
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/workflow_WorkflowDataItemList"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Get Workflow Data",
        "description": "Get list of workflow data associated with this build (without data itself)",
        "x-sdk-interface": "workflows.getWorkflowData",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getWorkflowData"
        }
      },
      "post": {
        "x-hide": true,
        "operationId": "push-workflow-data",
        "parameters": [
          {
            "$ref": "#/components/parameters/path_runningWorkflowId"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/workflow_WorkflowDataItem"
          },
          "400": {
            "description": "Not possible to add data item to the workflow",
            "content": {
              "application/json": {
                "example": {
                  "status": 400,
                  "code": "1004",
                  "name": "BAD_REQUEST_ERROR",
                  "message": "Workflow Data Item cannot be saved for non running workflow, workflow status: terminating",
                  "context": {}
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/workflow_WorkflowDataItem"
        },
        "tags": [
          "builds"
        ],
        "summary": "Push New Workflow Data",
        "description": "Add any data you want to the running build",
        "x-sdk-interface": "workflows.pushWorkflowData",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "workflow.pushWorkflowData"
        }
      }
    },
    "/workflow/{workflowId}/data/{id}": {
      "get": {
        "x-hide": true,
        "operationId": "get-workflow-data-item",
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/query_decryptData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/workflow_WorkflowDataItem"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Get Workflow Data Item",
        "description": "Get actual workflow data associated with this build (encrypted or decrypted)",
        "x-sdk-interface": "workflows.getWorkflowDataItem",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getWorkflowDataItem"
        }
      }
    },
    "/workflow/{workflowId}/event": {
      "post": {
        "operationId": "workflows-workflow-event",
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Send workflow event",
        "x-hide": true,
        "x-sdk-interface": "workflows.sendWorkflowEvent",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAuthenticatedAsEngine"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "workflow.handleWorkflowEvent"
        }
      }
    },
    "/workflow/{processId}/process": {
      "get": {
        "operationId": "get-workflow-by-id",
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "description": "workflow process id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "x-hide": true,
        "summary": "Get",
        "x-sdk-interface": "workflows.getProcessById",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getProcessById"
        }
      }
    },
    "/workflow/{workflowId}/pending-approval/approve": {
      "get": {
        "x-action": "approveBuild",
        "x-entityId": "params.workflowId",
        "x-allowed": {
          "body": [
            "buildStrategy"
          ]
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved workflow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Build id",
                  "example": "602d13fd8d78ab7c4d9d81b2"
                }
              }
            }
          },
          "500":  {
            "description": "Failed to approve workflow -- workflow may be already approved",
            "content": {
              "application/json": {
                "example": {
                  "status": 500,
                  "code": "1001",
                  "name": "INTERNAL_SERVER_ERROR",
                  "message": "Failed to run pipeline",
                  "context": {}
                }
              }
            }
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-approve",
        "summary": "Approve",
        "description": "Approve pending-approval build",
        "x-sdk-interface": "workflows.approve",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "audit.allow",
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacSource": "workflow",
              "action": "approve",
              "description": "Approve or deny a build that is pending-approval"
            }
          },
          "preMiddleware": [
            "workflow.approvePendingApprovalWorkflow",
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/workflow/{workflowId}/pending-approval/deny": {
      "get": {
        "x-action": "denyBuild",
        "x-entityId": "params.workflowId",
        "x-allowed": {
          "body": [
            "buildStrategy"
          ]
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully denied workflow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Build id",
                  "example": "602d13fd8d78ab7c4d9d81b2"
                }
              }
            }
          },
          "500":  {
            "description": "Failed to deny workflow -- build may be already denied",
            "content": {
              "application/json": {
                "example": {
                  "status": 500,
                  "code": "1001",
                  "name": "INTERNAL_SERVER_ERROR",
                  "message": "Failed to run pipeline",
                  "context": {}
                }
              }
            }
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-deny",
        "summary": "Deny",
        "description": "Deny pending-approval build",
        "x-sdk-interface": "workflows.deny",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "audit.allow",
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacSource": "workflow",
              "action": "approve"
            }
          },
          "preMiddleware": [
            "workflow.denyPendingApprovalWorkflow",
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/workflow/{workflowId}/useDebugger": {
      "get": {
        "x-action": "getUseDebugger",
        "x-entityId": "params.workflowId",
        "x-allowed": {},
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "useDebugger field is set to true if debug mode is on, otherwise false",
                    "value": {
                      "useDebugger": true
                    }
                  }
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-get-debug",
        "summary": "Check if debug mode is on for an existing build",
        "x-sdk-interface": "workflows.getUseDebugger",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "identifiersLocation": "params.workflowId",
              "abacSource": "workflow",
              "abac": true,
              "action": "debug",
              "description": "Get debug state"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getUseDebugger"
        }
      },
      "post": {
        "x-action": "debug",
        "x-entityId": "params.workflowId",
        "x-allowed": {},
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "Acknowledgement - if successful, OK field is set to true, otherwise false",
                    "value": {
                      "OK": true
                    }
                  }
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-debug",
        "summary": "Turn on debug mode for an existing build",
        "x-sdk-interface": "workflows.setUseDebugger",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "identifiersLocation": "params.workflowId",
              "abacSource": "workflow",
              "abac": true,
              "action": "debug",
              "description": "Switch workflow in debug mode"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.setUseDebugger"
        }
      }
    },
    "/builds/{buildId}": {
      "get": {
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Build ID",
            "required": true
          },
          {
            "name": "noAccount",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "noAccount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "The ID of the new build",
                    "value": {
                      "project": "default",
                      "projectId": "60294468d9e71ac40c5abd55",
                      "serviceId": "6029446cd9e71a0dd35abd56",
                      "serviceName": "sleepy",
                      "pipelineName": "default/sleepy",
                      "triggersCount": 1,
                      "repoOwner": "",
                      "repoName": "",
                      "id": "602bd48b2294b2b7437acca3",
                      "created": "2021-02-16T16:21:18.993Z",
                      "started": "2021-02-16T16:21:29.808Z",
                      "finished": "2021-02-16T16:22:23.893Z",
                      "delayed": 0,
                      "status": "success",
                      "pendingLicense": false,
                      "progress": "602bd48b2294b2b7437acca2",
                      "request": "602bd48b2294b2b7437acca4",
                      "trigger": "build",
                      "triggeredBy": "601acc2c8dc678223577dec1",
                      "webhookTriggered": false,
                      "triggerType": "MANUAL",
                      "account": "601acc2c8dc678223577dec2",
                      "autoGeneratedYaml": false,
                      "terminationRequest": [],
                      "systemEvents": [],
                      "finalWorkflowYaml": "version: '1.0'\nsteps:\n  test:\n    title: Running test\n    type: freestyle\n    image: 'ubuntu:latest'\n    commands:\n      - sleep 20\nstages: []\n",
                      "hasExtendedYaml": true,
                      "exportedVariables": {},
                      "pendingApprovals": [],
                      "useDebugger": false,
                      "initiator": "codefresh",
                      "initiatorAvatar": "https://avatars3.githubusercontent.com/u/69415974?v=4",
                      "hasImplicitGitCloneStep": false,
                      "packId": "5cd1746617313f468d669013",
                      "keepPVCsForPendingApproval": false,
                      "pendingApprovalConcurrencyApplied": false,
                      "userYamlDescriptor": "version: \"1.0\"\n\n\nsteps:\n  test:\n    title: \"Running test\"\n    type: \"freestyle\"\n    image: \"ubuntu:latest\"\n    commands:\n      - \"sleep 20\"\n\n\n",
                      "steps": [
                        "Initializing Process",
                        "test"
                      ],
                      "progress_id": "602bd48b2294b2b7437acca2",
                      "_id": "602bd48b2294b2b7437acca3",
                      "buildType": "workflow"
                    }
                  }
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-get-build",
        "summary": "Get build by ID",
        "x-sdk-interface": "workflows.getBuild",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "build.getBuildById"
        }
      }
    },
    "/builds/{name}/": {
      "post": {
        "x-action": "runPipeline",
        "x-entityId": {
          "pathName": "params.name"
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-run-pipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "branch",
                    "serviceName"
                  ]
                },
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "buildFlags": {
                    "properties": {
                      "nocache": {
                        "default": false,
                        "description": "use docker cache",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "sha": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-hide": true,
        "summary": "Build by service",
        "x-sdk-interface": "workflows.runPipeline",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/builds-debug/{name}/": {
      "post": {
        "x-action": "debugPipeline",
        "x-entityId": {
          "pathName": "params.name"
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-debug-pipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "branch",
                    "serviceName"
                  ]
                },
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "buildFlags": {
                    "properties": {
                      "nocache": {
                        "default": false,
                        "description": "use docker cache",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "sha": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-hide": true,
        "summary": "Debug by service",
        "x-sdk-interface": "workflows.debugPipeline",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "debug",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.debugPipeline"
        }
      }
    },
    "/builds/rebuild/{buildId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonString"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "The ID of the new build",
                    "value": "602be9cc2294b2b7437acdbb"               }
                }
              }
            },
            "description": "json string"
          }
        },
        "x-action": "restartWorkflow",
        "x-entityId": {
          "pathId": "params.buildId"
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-restart",
        "parameters": [
          {
            "in": "path",
            "name": "buildId",
            "schema": {
              "type": "string"
            },
            "description": "Build ID",
            "required": true
          }
        ],
        "summary": "Restart a build by ID",
        "x-sdk-interface": "workflows.restart",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated",
              "audit.allow"
            ],
            "acl": {
              "resource": "pipeline",
              "abacSource": "workflow",
              "identifiersLocation": "params.buildId",
              "action": "run",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "build.rebuild"
        }
      }
    },
    "/builds/rebuild-debug/{buildId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonString"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "The ID of the new build",
                    "value": "602be9cc2294b2b7437acdbb"               }
                }
              }
            },
            "description": "json string"
          }
        },
        "x-action": "restartWorkflowWithDebugger",
        "x-entityId": {
          "pathId": "params.buildId"
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-restart-debug",
        "parameters": [
          {
            "in": "path",
            "name": "buildId",
            "schema": {
              "type": "string"
            },
            "description": "Build ID",
            "required": true
          }
        ],
        "summary": "Restart a build in debug mode by ID",
        "x-sdk-interface": "workflows.restartDebug",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated",
              "audit.allow"
            ],
            "acl": {
              "resource": "pipeline",
              "abacSource": "workflow",
              "identifiersLocation": "params.buildId",
              "action": "debug",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "build.rebuildDebug"
        }
      }
    },
    "/repos/webhooks/{repoOwner}/{repoName}/{provider}/{context}": {
      "get": {
        "summary": "Get trigger",
        "x-sdk-interface": "repos.getTrigger",
        "tags": [
          "repos"
        ],
        "operationId": "get-git-triggers",
        "parameters": [
          {
            "$ref": "#/components/parameters/repoOwner"
          },
          {
            "$ref": "#/components/parameters/repoName"
          },
          {
            "$ref": "#/components/parameters/path_repos_provider"
          },
          {
            "$ref": "#/components/parameters/path_repos_context"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "repos"
            }
          },
          "handler": "repos.getTrigger"
        }
      }
    },
    "/clusters": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "clusters.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.getClusters"
        }
      }
    },
    "/clusters/local/cluster": {
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/create_localCluster"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-save-local-cluster",
        "parameters": [],
        "summary": "Save local cluster",
        "x-sdk-interface": "clusters.saveLocal",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "preMiddleware": [
            "clusters.testClusterCredentials"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyPostLocalCluster"
        }
      }
    },
    "/clusters/revoke/{provider}": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-revoke",
        "parameters": [
          {
            "description": "id of provider",
            "in": "path",
            "name": "provider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Revoke account access to cluster",
        "x-sdk-interface": "clusters.revoke",
        "x-action": "deleteCloudIntegration",
        "x-entityId": "params.provider",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.revokeAccountAccess"
        }
      }
    },
    "/clusters/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
        ],
        "summary": "Get all cluster tags",
        "x-sdk-interface": "clusters.tags.getAll",
        "operationId": "clusters-tags-get-all",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.getAllTags"
        }
      }
    },
    "/clusters/{clusterId}/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "cluster id"
          }
        ],
        "summary": "List cluster tags",
        "x-sdk-interface": "clusters.tags.list",
        "operationId": "clusters-tags-list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.getTags"
        }
      },
      "put": {
        "x-action": "updateTags",
        "x-entityId": "params.clusterId",
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "cluster id"
          }
        ],
        "summary": "Put",
        "x-sdk-interface": "clusters.tags.update",
        "operationId": "clusters-tags-update",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.setTags"
        }
      }
    },
    "/clusters/{clusterId}/credentials": {
      "get": {
        "x-action": "getCredentials",
        "x-entityId": "params.clusterId",
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "cluster id"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "clusters.credentials.get",
        "operationId": "clusters-credentials-get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.getCredentials"
        }
      }
    },
    "/clusters/{clusterId}/helm-version": {
      "get": {
        "x-action": "getHelmVersion",
        "x-entityId": "params.clusterId",
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "cluster id"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "clusters.helmVersion.get",
        "operationId": "clusters-helmVersion-get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.getHelmVersion"
        }
      },
      "post": {
        "x-action": "setHelmVersion",
        "x-entityId": "params.clusterId",
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "cluster id"
          }
        ],
        "summary": "Put",
        "x-sdk-interface": "clusters.helmVersion.update",
        "operationId": "clusters-helmVersion-update",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.setHelmVersion"
        }
      }
    },
    "/clusters/{provider}/cluster/{clusterId}": {
      "delete": {
        "x-action": "deleteCluster",
        "x-entityId": {
          "pathName": "params.provider"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-delete",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Provider"
          },
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "clusters.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.deleteCluster"
        }
      }
    },
    "/clusters/{provider}/cluster": {
      "post": {
        "x-action": "createCluster",
        "x-entityId": {
          "pathName": "params.provider"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-create",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Provider"
          }
        ],
        "summary": "Create",
        "x-sdk-interface": "clusters.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.createCluster"
        }
      }
    },
    "/clusters/*": {
      "head": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-head",
        "parameters": [
        ],
        "summary": "Proxy head",
        "x-sdk-interface": "clusters.proxyHead",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "options": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-options",
        "parameters": [
        ],
        "summary": "Proxy options",
        "x-sdk-interface": "clusters.proxyOptions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-get",
        "parameters": [
        ],
        "summary": "Proxy get",
        "x-sdk-interface": "clusters.proxyGet",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-post",
        "parameters": [
        ],
        "summary": "Proxy post",
        "x-sdk-interface": "clusters.proxyPost",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-put",
        "parameters": [
        ],
        "summary": "Proxy put",
        "x-sdk-interface": "clusters.proxyPut",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "patch": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-patch",
        "parameters": [
        ],
        "summary": "Proxy patch",
        "x-sdk-interface": "clusters.proxyPatch",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "delete": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-delete",
        "parameters": [
        ],
        "summary": "Proxy delete",
        "x-sdk-interface": "clusters.proxyDelete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      }
    },
    "/compositions": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "compositions.list"
      },
      "post": {
        "x-action": "createComposition",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "name"
                  ]
                },
                "properties": {
                  "isAdvanced": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "yamlJson": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "compositions.create"
      }
    },
    "/compositions/{identifier}/run": {
      "post": {
        "x-action": "runComposition",
        "x-entityId": "params.identifier",
        "parameters": [
          {
            "description": "id or name of a composition",
            "in": "path",
            "name": "identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-launch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": []
                },
                "properties": {
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Launch",
        "x-sdk-interface": "compositions.launch"
      }
    },
    "/compositions/{id}": {
      "delete": {
        "x-action": "deleteComposition",
        "x-entityId": "params.id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-delete",
        "summary": "Delete",
        "x-sdk-interface": "compositions.delete"
      },
      "get": {
        "parameters": [
          {
            "description": "id or name of a composition",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-get",
        "summary": "Get",
        "x-sdk-interface": "compositions.get"
      },
      "put": {
        "x-action": "updateComposition",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "bony.name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "account",
                    "created",
                    "createdBy",
                    "name",
                    "_id"
                  ]
                },
                "properties": {
                  "isAdvanced": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "yamlJson": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Update the name/variables/body of the composition with the id inserted",
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "compositions.update"
      },
      "patch": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-patch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Patch",
        "x-sdk-interface": "compositions.patch"
      }
    },
    "/compositions/{id}/duplicate": {
      "post": {
        "x-action": "duplicateComposition",
        "x-entityId": "params.id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-duplicate",
        "summary": "Duplicate",
        "x-sdk-interface": "compositions.duplicate"
      }
    },
    "/contexts": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-list",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Type"
          },
          {
            "in": "query",
            "name": "decrypt",
            "schema": {
              "type": "string"
            },
            "description": "Decrypt"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "contexts.list"
      },
      "post": {
        "x-action": "createContext",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.metadata.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-create",
        "parameters": [
          {
            "in": "query",
            "name": "skipValidation",
            "schema": {
              "type": "string"
            },
            "description": "Skip validation"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "contexts.create"
      }
    },
    "/contexts/{name}": {
      "delete": {
        "x-action": "deleteContext",
        "x-entityIdPath": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "contexts.delete"
      },
      "put": {
        "x-action": "updateContext",
        "x-entityIdPath": "params.name",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-replace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Replace",
        "x-sdk-interface": "contexts.replace"
      },
      "patch": {
        "x-action": "updateContext",
        "x-entityId": {
          "pathId": "params.name",
          "handlerId": "decodeContextName",
          "pathName": "params.name",
          "handlerName": "decodeContextName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-patch",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "contexts.patch"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "query",
            "name": "decrypt",
            "schema": {
              "type": "string"
            },
            "description": "Decrypt"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "contexts.get"
      }
    },
    "/contexts/{name}/default": {
      "patch": {
        "x-action": "updateContext",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-default-patch",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "contexts.default.patch"
      }
    },
    "/contexts/{name}/prepare": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-prepare",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "contexts.prepare"
      }
    },
    "/customers/{customerId}/createAccount": {
      "post": {
        "x-action": "addNewAccount",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-add-new-account",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add new account",
        "x-sdk-interface": "customers.addNewAccount"
      }
    },
    "/customers/{customerId}/{accountId}/updateAccountLimits": {
      "post": {
        "x-action": "updateAccountLimits",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-update-accounts-limits",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update account limits",
        "x-sdk-interface": "customers.updateAccountLimits"
      }
    },
    "/customers/{customerId}/{userId}/addCustomerAdmin": {
      "post": {
        "x-action": "addCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-add-customer-admin",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add customer admin",
        "x-sdk-interface": "customers.addCustomerAdmin"
      }
    },
    "/customers/{customerId}/{userId}/removeCustomerAdmin": {
      "post": {
        "x-action": "removeCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-remove-customer-admin",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer id",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User id",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Remove customer admin",
        "x-sdk-interface": "customers.removeCustomerAdmin"
      }
    },
    "/environments": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "envs.list"
      }
    },
    "/environments/all/terminate": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-terminate-all",
        "summary": "Terminate all",
        "parameters": [],
        "x-sdk-interface": "envs.terminateAll"
      }
    },
    "/environments/{id}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-get",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "envs.get"
      }
    },
    "/environments/{id}/pause": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-pause",
        "summary": "Pause",
        "x-sdk-interface": "envs.pause"
      }
    },
    "/environments/{envId}/rename/{newName}": {
      "get": {
        "parameters": [
          {
            "description": "The new name to assign to the environment",
            "in": "path",
            "name": "newName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "envId",
            "schema": {
              "type": "object"
            },
            "description": "envId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-rename",
        "summary": "Rename",
        "x-sdk-interface": "envs.rename"
      },
      "post": {
        "x-action": "renameRuntimeEnv",
        "x-entityId": {
          "pathId": "params.envId",
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "environments-rename-runtime-env",
        "parameters": [
          {
            "description": "The new name to assign to the environment",
            "in": "path",
            "name": "newName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "envId",
            "schema": {
              "type": "string"
            },
            "description": "Runtime environment ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Rename runtime environment",
        "x-sdk-interface": "environments.renameRuntimeEnv"
      }
    },
    "/environments/{id}/start": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-start",
        "summary": "Start",
        "x-sdk-interface": "envs.start"
      }
    },
    "/environments/{id}/status": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-status",
        "summary": "Status",
        "x-sdk-interface": "envs.status"
      }
    },
    "/environments/{id}/stop": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-stop",
        "summary": "Stop",
        "x-sdk-interface": "envs.stop"
      }
    },
    "/environments/{id}/terminate": {
      "get": {
        "parameters": [
          {
            "description": "ID of the environment",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-terminate",
        "summary": "Terminate",
        "x-sdk-interface": "envs.terminate"
      }
    },
    "/environments/{id}/unpause": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-unpause",
        "summary": "Unpause",
        "x-sdk-interface": "envs.unpause"
      }
    },
    "/execution-contexts-tags": {
      "get": {
        "x-sdk-interface": "executionContexts.getTags",
        "operationId": "execution-contexts-tags",
        "summary": "Get tags of execution contexts",
        "description": "get the tags for the account execution contexts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "tags array response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.getTags"
        }
      }
    },
    "/execution-contexts-default": {
      "get": {
        "x-sdk-interface": "executionContexts.getDefault",
        "operationId": "execution-contexts-default-get",
        "summary": "Current default execution context",
        "description": "get the default execution context for the account",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Execution context response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execution_context_item"
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.getAccountDefault"
        }
      }
    },
    "/execution-contexts-default/{id}": {
      "patch": {
        "x-sdk-interface": "executionContexts.setDefault",
        "operationId": "execution-contexts-default-set",
        "summary": "Set default execution context",
        "description": "Set execution context as the account default (instead of the current default)",
        "x-action": "setAccountDefault",
        "x-audit": {
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Execution context response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execution_context_item"
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAccountAdmin"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.setAccountDefault"
        }
      }
    },
    "/execution-contexts/{id}/assignments": {
      "get": {
        "x-sdk-interface": "executionContexts.listAssignments",
        "operationId": "execution-contexts-assignments",
        "summary": "Get execution context assignments",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Execution context response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execution_context_assignment_item"
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.listAssignments"
        }
      }
    },
    "/execution-contexts": {
      "post": {
        "x-action": "executionContextsCreate",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "id",
            "source": "res"
          }
        },
        "x-sdk-interface": "executionContexts.create",
        "operationId": "execution-contexts-create",
        "summary": "Create execution context",
        "description": "Create execution context assign permissions for the running pipeline",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description" : "Unique name",
                    "type": "string"
                  },
                  "description": {
                    "description" : "Informative description",
                    "type": "string"
                  },
                  "tags": {
                    "description" : "Tags for attribute access control of that entity assignment",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Execution context create response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execution_context_item"
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAccountAdmin"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.create"
        }
      },
      "get": {
        "x-sdk-interface": "executionContexts.list",
        "operationId": "execution-contexts-list",
        "summary": "List execution contexts",
        "description": "List account exection context filtered by optional query parameters",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "Filter by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Filter by unique name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Filter by all tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountDefault",
            "description": "Filter by if is the execution context is default for the account",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Execution context list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/execution_context_item"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.get"
        }
      }
    },
    "/execution-contexts/current": {
      "get": {
        "x-sdk-interface": "executionContexts.getCurrent",
        "operationId": "execution-contexts-get-current",
        "summary": "Get current execution context",
        "description": "Get current session execution context",
        "responses": {
          "200": {
            "description": "Current execution context response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execution_context_item"
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.current"
        }
      }
    },
    "/execution-contexts/{id}": {
      "get": {
        "x-sdk-interface": "executionContexts.get",
        "operationId": "execution-contexts-get",
        "summary": "Get execution context by id",
        "description": "Get by id 404 if not found",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Execution context response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execution_context_item"
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.getByIdOrName"
        }
      },
      "patch": {
        "x-action": "executionContextsUpdate",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-sdk-interface": "executionContexts.patch",
        "operationId": "execution-contexts-patch",
        "summary": "Update execution context",
        "description": "Update execution context fields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name",
                    "type": "string"
                  },
                  "description": {
                    "description" : "Informative description",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Tags used for ABAC assignment of that execution context",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Execution context response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execution_context_item"
                }
              }
            }
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAccountAdmin"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.update"
        }
      },
      "delete": {
        "x-action": "executionContextsDelete",
        "x-entityId": {
          "pathId": "params.id"
        },
        "x-sdk-interface": "executionContexts.delete",
        "operationId": "execution-contexts-delete",
        "summary": "Delete execution context",
        "description": "Delete execution context, if its not used/default",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "execution-contexts"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "execution-context"
            },
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAccountAdmin"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.delete"
        }
      }
    },
    "/features/{accountId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "features"
        ],
        "operationId": "features-account",
        "summary": "Account",
        "x-sdk-interface": "features.account"
      },
      "post": {
        "x-action": "addFeature",
        "x-entityId": {
          "pathName": "body.feature"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "features"
        ],
        "operationId": "features-add",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "feature": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Add feature",
        "x-sdk-interface": "features.add"
      }
    },
    "/features/switchOff/{accountId}": {
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "features"
        ],
        "operationId": "features-disable",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "feature": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Disable feature",
        "x-sdk-interface": "features.disable"
      }
    },
    "/form-metadata/create": {
      "post": {
        "x-action": "createFormMetadata",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "form-metadata"
        ],
        "operationId": "form-metadata-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create form metadata",
        "x-sdk-interface": "formMetadata.create"
      }
    },
    "/form-metadata/{name}/update": {
      "put": {
        "x-action": "updateFormMetadata",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "form-metadata"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "metadata name"
          }
        ],
        "operationId": "form-metadata-update",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update form metadata",
        "x-sdk-interface": "formMetadata.update"
      }
    },
    "/form-metadata/{name}": {
      "delete": {
        "x-action": "deleteFormMetadata",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "form-metadata"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "metadata name"
          }
        ],
        "operationId": "form-metadata-delete",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Delete form metadata",
        "x-sdk-interface": "formMetadata.delete"
      }
    },
    "/form-metadata/activate/{groupId}/{name}": {
      "patch": {
        "x-action": "setActiveFormMetadata",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "form-metadata"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "metadata group name"
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "metadata name"
          }
        ],
        "operationId": "form-metadata-set-active",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Set active form metadata",
        "x-sdk-interface": "formMetadata.setActive"
      }
    },
    "/helm/boards": {
      "delete": {
        "x-action": "deleteAllBoards",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-delete-all",
        "summary": "Delete all",
        "parameters": [],
        "x-sdk-interface": "helm.boards.deleteAll"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Board objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "helm.boards.list"
      },
      "post": {
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-action": "createHelmBoard",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_boardOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "helm.boards.create"
      }
    },
    "/helm/boards/name/{name}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardName"
          },
          {
            "description": "include sections in response",
            "in": "query",
            "name": "columns",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-get-by-name",
        "summary": "Get by name",
        "x-sdk-interface": "helm.boards.getByName"
      }
    },
    "/helm/boards/sections": {
      "post": {
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-action": "createHelmSection",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Section object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_sectionOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "helm.sections.create"
      }
    },
    "/helm/boards/sections/reorder": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-reorder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "[sectionId]": {
                    "example": "<section index>",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Reorder",
        "parameters": [],
        "x-sdk-interface": "helm.sections.reorder"
      }
    },
    "/helm/boards/sections/{id}": {
      "delete": {
        "x-entityId": "body.id",
        "x-action": "deleteHelmSection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-delete",
        "summary": "Delete",
        "x-sdk-interface": "helm.sections.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-get",
        "summary": "Get",
        "x-sdk-interface": "helm.sections.get"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Patch",
        "x-sdk-interface": "helm.sections.patch"
      },
      "put": {
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-action": "updateHelmSection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "helm.sections.update"
      }
    },
    "/helm/boards/sections/helm-board-pipelines-config/{sectionId}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.board-pipelines-config"
        ],
        "operationId": "helm-board-pipelines-config-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/sectionId"
          }
        ],
        "summary": "Get board pipelines config",
        "x-sdk-interface": "helm.board-pipelines-config.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "board"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "helm.getBoardPipelinesConfig"
        }
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.board-pipelines-config"
        ],
        "operationId": "helm-board-pipelines-config-store",
        "parameters": [
          {
            "$ref": "#/components/parameters/sectionId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Store board pipelines config",
        "x-sdk-interface": "helm.board-pipelines-config.store",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "board"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "helm.storeBoardPipelinesConfig"
        }
      }
    },
    "/helm/boards/{boardId}/sections": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-delete-all",
        "summary": "Delete all",
        "x-sdk-interface": "helm.sections.deleteAll"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Section object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-list",
        "summary": "List",
        "x-sdk-interface": "helm.sections.list"
      }
    },
    "/helm/boards/{boardId}/sections/name/{name}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          },
          {
            "$ref": "#/components/parameters/sectionName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-get-by-name",
        "summary": "Get by name",
        "x-sdk-interface": "helm.sections.getByName"
      }
    },
    "/helm/boards/{id}": {
      "delete": {
        "x-entityId": "params.id",
        "x-action": "deleteHelmBoard",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-delete",
        "summary": "Delete",
        "x-sdk-interface": "helm.boards.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-get",
        "summary": "Get",
        "x-sdk-interface": "helm.boards.get"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Patch",
        "x-sdk-interface": "helm.boards.patch"
      },
      "put": {
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-action": "editHelmBoard",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "helm.boards.update"
      }
    },
    "/helm/repos": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-create",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "x-sdk-interface": "helm.repos.create"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Query"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "helm.repos.list"
      }
    },
    "/helm/repos/{name}": {
      "delete": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "helm.repos.delete"
      },
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-update",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update",
        "x-sdk-interface": "helm.repos.update"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "helm.repos.get"
      }
    },
    "/helm/cluster-config/{selector}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.cluster-config"
        ],
        "operationId": "helm-cluster-config-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/path_selector"
          }
        ],
        "summary": "Get cluster config",
        "x-sdk-interface": "helm.cluster-config.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "helm.getClusterConfig"
        }
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.cluster-config"
        ],
        "operationId": "helm-cluster-config-store",
        "parameters": [
          {
            "$ref": "#/components/parameters/path_selector"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Store cluster config",
        "x-sdk-interface": "helm.cluster-config.store",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "helm.storeClusterConfig"
        }
      }
    },
    "/helm/release-config/{selector}/{releaseName}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.release-config"
        ],
        "operationId": "helm-release-config-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/path_release_name"
          },
          {
            "$ref": "#/components/parameters/path_selector"
          }
        ],
        "summary": "Get release config",
        "x-sdk-interface": "helm.release-config.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "helm.getReleaseConfig"
        }
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.release-config"
        ],
        "operationId": "helm-release-config-store",
        "parameters": [
          {
            "$ref": "#/components/parameters/path_release_name"
          },
          {
            "$ref": "#/components/parameters/path_selector"
          }
        ],
        "summary": "Store relese config",
        "x-sdk-interface": "helm.release-config.store",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "helm.storeReleaseConfig"
        }
      }
    },
    "/helm/releases/refresh": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm"
        ],
        "operationId": "helm-releases-refresh-request",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Refresh helm releases",
        "x-sdk-interface": "helm.releases.refresh-request",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.refresh"
        }
      }
    },
    "/helm/releases/force-refresh": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm"
        ],
        "operationId": "helm-releases-force-refresh-request",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Force refresh helm releases",
        "x-sdk-interface": "helm.releases.force-refresh-request",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "helm.refreshForceReleases"
        }
      }
    },
    "/hermes/events": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful creation of event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonString"
                },
                "example": "registry:dockerhub:myaccount:hello:push:c2311e92660d"
              }
            }
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-create",
        "parameters": [
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "string"
            },
            "description": "create public trigger if specified: true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "registry",
                    "description": "Trigger type"
                  },
                  "kind": {
                    "type": "string",
                    "example": "dockerhub",
                    "description": "Kind of trigger type"
                  },
                  "filter": {
                    "type": "string",
                    "default": ""
                  },
                  "secret": {
                    "type": "string",
                    "default": "!generate",
                    "description": "secret is required, `!generate` can be provide for auto generation"
                  },
                  "values": {
                    "type": "object",
                    "properties": {
                      "namespace": {
                        "type": "string",
                        "description": "Account context"
                      },
                      "name": {
                        "type": "string",
                        "description": "Full pipeline name including project: {project}/{pipeline}"
                      },
                      "action": {
                        "type": "string",
                        "default": "push"
                      }
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a trigger-event, trigger-event provides a webhook for triggering a specified workflow.",
        "description": "Create a trigger-event entity. The trigger-event entity is used for triggering a workflow (using account context as 'namespace' and {project}/{pipeline} as name). This entity has an endpoint field that holds the trigger's webhook",
        "x-sdk-interface": "triggers.events.create"
      },
      "get": {
        "responses": {
          "200": {
            "description": "List of event-triggers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/trigger-event"
                  },
                  "example": [
                    {
                      "endpoint": "https://g.codefresh.io/nomios/dockerhub?account=1e88****\u0026secret=sBdW****",
                      "description": "Docker Hub mydhuccount/hello push event",
                      "status": "active",
                      "help": "Docker Hub webhooks fire when an image is built in, pushed or a new tag is added to, your repository.\n\nConfigure Docker Hub on https://hub.docker.com/r/mydhuccount/hello/~/settings/webhooks/\n\nAdd following Codefresh Docker Hub webhook endpoint https://g.codefresh.io/nomios/dockerhub?account=1e88****\u0026secret=sBdW****",
                      "uri": "registry:dockerhub:mydhuccount:hello:push:1e88****",
                      "type": "registry",
                      "kind": "dockerhub",
                      "account": "5e7c****",
                      "secret": "sBdW****"
                    },
                    {
                      "endpoint": "https://g.codefresh.io/nomios/dockerhub?account=1e88****\u0026secret=Tg2D****",
                      "description": "Docker Hub mydhuccount/ui-api push event",
                      "status": "active",
                      "help": "Docker Hub webhooks fire when an image is built in, pushed or a new tag is added to, your repository.\n\nConfigure Docker Hub on https://hub.docker.com/r/mydhuccount/ui-api/~/settings/webhooks/\n\nAdd following Codefresh Docker Hub webhook endpoint https://g.codefresh.io/nomios/dockerhub?account=1e88****\u0026secret=Tg2D****",
                      "uri": "registry:dockerhub:mydhuccount:ui-api:push:1e88****",
                      "type": "registry",
                      "kind": "dockerhub",
                      "account": "5e7c****",
                      "secret": "Tg2D****"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-list",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "example": "registry"
            },
            "description": "optional i.e ?type=registry"
          },
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "type": "string",
              "example": "dockerhub"
            },
            "description": "optional i.e ?kind=dockerhub"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "optional i.e. ?filter=filterMyRepoTag"
          },
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "boolean",
              "example": "true"
            },
            "description": "optional i.e. ?public=true"
          }
        ],
        "description": "Provides trigger events, can be filtered by Type/Kind/Public. see: /event/types",
        "summary": "List trigger-events",
        "x-sdk-interface": "triggers.events.list"
      }
    },
    "/hermes/events/{event}": {
      "get": {
        "responses": {
          "200": {
            "description": "Get event-trigger. get /hermes/events/registry:dockerhub:mydhuccount:hello:push:1e88****",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trigger-event"
                },
                "example": {
                  "endpoint": "https://g.codefresh.io/nomios/dockerhub?account=1e88****\u0026secret=sBdW****",
                  "description": "Docker Hub mydhuccount/hello push event",
                  "status": "active",
                  "help": "Docker Hub webhooks fire when an image is built in, pushed or a new tag is added to, your repository.\n\nConfigure Docker Hub on https://hub.docker.com/r/mydhuccount/hello/~/settings/webhooks/\n\nAdd following Codefresh Docker Hub webhook endpoint https://g.codefresh.io/nomios/dockerhub?account=1e88****\u0026secret=sBdW****",
                  "uri": "registry:dockerhub:mydhuccount:hello:push:1e88****",
                  "type": "registry",
                  "kind": "dockerhub",
                  "account": "5e7c****",
                  "secret": "sBdW****"
                }
              }
            }
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-get",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event  i.e. registry:dockerhub:myaccount:hello:push:c2311e92660d "
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "triggers.events.get"
      }
    },
    "/hermes/events/{event}/{context}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Successful delete of trigger event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonString"
                },
                "example": ""
              }
            }
          },
          "500": {
            "description": "Error response - can't delete if not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                },
                "example": {
                  "status": 500,
                  "message": "failed to delete trigger event",
                  "error": "trigger event not found"
                }
              }
            }
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-delete",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event"
          },
          {
            "in": "path",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Context"
          }
        ],
        "summary": "Delete",
        "description": "Delete a trigger-event by specified 'event' identifier",
        "x-sdk-interface": "triggers.events.delete"
      }
    },
    "/hermes/triggers": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/trigger"
                  }
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "List of triggers (event data will not return with this request)",
                    "value": [
                      {
                        "event": "registry:dockerhub:org:repository:push:2cf1fed*****",
                        "pipeline": "60098c2de8e*****",
                        "filters": {
                          "tag": "test"
                        },
                        "event-data": {
                          "uri": "",
                          "type": "",
                          "kind": "",
                          "account": "",
                          "secret": ""
                        }
                      },
                      {
                        "event": "cron:codefresh:0 0/1 * 1/1 * *:test:2cf1fed*****",
                        "pipeline": "60098c2de8e*****",
                        "event-data": {
                          "uri": "",
                          "type": "",
                          "kind": "",
                          "account": "",
                          "secret": ""
                        }
                      },
                      {
                        "event": "helm:jfrog:gfg:gfgf:push:2cf1fed*****",
                        "pipeline": "60098c2de8e*****",
                        "event-data": {
                          "uri": "",
                          "type": "",
                          "kind": "",
                          "account": "",
                          "secret": ""
                        }
                      }
                    ]
                  }
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-list",
        "parameters": [],
        "summary": "List of triggers",
        "x-sdk-interface": "triggers.list"
      }
    },
    "/hermes/triggers/event/{event}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trigger"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "get trigger by event (event data will not return with this request)",
                    "value": [
                      {
                        "event": "registry:dockerhub:org:repository:push:2cf1fed*****",
                        "pipeline": "2cf1fed*****",
                        "filters": {
                          "tag": "test"
                        },
                        "event-data": {
                          "uri": "",
                          "type": "",
                          "kind": "",
                          "account": "",
                          "secret": ""
                        }
                      }
                    ]
                  }
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-get-event-triggers",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event name - i.e. registry:dockerhub:org:repository:push:2cf1fed*****"
          }
        ],
        "summary": "Get trigger by event name",
        "x-sdk-interface": "triggers.getEventTriggers"
      }
    },
    "/hermes/triggers/pipeline/{pipeline}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trigger"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "List of triggers for pipeline",
                    "value": [
                      {
                        "event": "cron:codefresh:0 0/1 * 1/1 * *:test:2cf1fed*****",
                        "pipeline": "60098c2de8e*****",
                        "event-data": {
                          "description": "2021-02-14T14:29:00Z",
                          "status": "active",
                          "help": "Cronus cron event provider triggers Codefresh pipeline execution, following cron expression.\nSupported cron expression syntax:\nhttps://github.com/codefresh-io/cronus/blob/master/docs/expression.md",
                          "uri": "cron:codefresh:0 0/1 * 1/1 * *:test:2cf1fed*****",
                          "type": "cron",
                          "kind": "codefresh",
                          "account": "59d3783792*****",
                          "secret": "Wjs1cCDZa92tAnBn"
                        }
                      },
                      {
                        "event": "helm:jfrog:gfg:gfgf:push:2cf1fed*****",
                        "pipeline": "60098c2de8e*****",
                        "event-data": {
                          "endpoint": "https://g.codefresh.io/nomios/helm/jfrog?account=2cf1fed*****\u0026secret=5X6iv9a******",
                          "description": "JFrog Artifactory repository/chart push event",
                          "status": "active",
                          "help": "JFrog Artifactory webhooks fire when an image is built in, pushed or a new tag is added to, your repository.\n\nConfigure JFrog Artifactory on https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/jfrog-triggers/\n\nAdd following Codefresh JFrog Artifactory webhook endpoint https://g.codefresh.io/nomios/helm/jfrog?account=2cf1fed*****\u0026secret=5X6iv9a******",
                          "uri": "helm:jfrog:gfg:gfgf:push:2cf1fed*****",
                          "type": "helm",
                          "kind": "jfrog",
                          "account": "59d3783792*****",
                          "secret": "5X6iv9a******"
                        }
                      },
                      {
                        "event": "registry:dockerhub:org:repository:push:2cf1fed*****",
                        "pipeline": "60098c2de8e*****",
                        "filters": {
                          "tag": "test"
                        },
                        "event-data": {
                          "endpoint": "https://g.codefresh.io/nomios/dockerhub?account=2cf1fed*****\u0026secret=fSbFkp3Pp*****",
                          "description": "Docker Hub org/repository push event",
                          "status": "active",
                          "help": "Docker Hub webhooks fire when an image is built in, pushed or a new tag is added to, your repository.\n\nConfigure Docker Hub on https://hub.docker.com/r/org/repository/~/settings/webhooks/\n\nAdd following Codefresh Docker Hub webhook endpoint https://g.codefresh.io/nomios/dockerhub?account=2cf1fed*****\u0026secret=fSbFkp3Pp*****",
                          "uri": "registry:dockerhub:org:repository:push:2cf1fed*****",
                          "type": "registry",
                          "kind": "dockerhub",
                          "account": "59d3783792*****",
                          "secret": "fSbFkp3Pp*****"
                        }
                      }
                    ]
                  }
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-get-pipeline-triggers",
        "parameters": [
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Pipeline id"
          },
          {
            "in": "query",
            "name": "with-event",
            "schema": {
              "type": "boolean"
            },
            "description": "if true the response will include event data"
          }
        ],
        "summary": "List of pipeline triggers",
        "x-sdk-interface": "triggers.getPipelineTriggers"
      }
    },
    "/hermes/triggers/{event}/{pipeline}": {
      "post": {
        "x-action": "createTrigger",
        "x-entityId": "params.pipeline",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-create",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event name - i.e. registry:dockerhub:org:repository:push:2cf1fed*****"
          },
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Pipeline id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create new trigger for pipeline",
        "x-sdk-interface": "triggers.create"
      },
      "delete": {
        "x-action": "deleteTrigger",
        "x-entityId": "params.pipeline",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-delete",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event name - i.e. registry:dockerhub:org:repository:push:2cf1fed*****"
          },
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Pipeline id"
          }
        ],
        "summary": "Delete trigger from pipeline",
        "x-sdk-interface": "triggers.delete"
      }
    },
    "/hermes/types": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "List of trigger types",
                    "value": [
                      {
                        "type": "registry",
                        "service-url": "http://production-nomios",
                        "kind": "dockerhub",
                        "uri-template": "registry:dockerhub:{{namespace}}:{{name}}:{{action}}",
                        "uri-regex": "^registry:dockerhub:[a-z0-9_-]+:[a-z0-9_-]+:push(:[[:xdigit:]]{12})$",
                        "help-url": "https://codefresh.io/docs/docs/pipeline-triggers/configure-dockerhub-trigger/",
                        "config": [
                          {
                            "name": "namespace",
                            "type": "string",
                            "help": "DockerHub username or organization name",
                            "validator": "^[a-z0-9_-]+$",
                            "required": true,
                            "name-label": "User/organization name"
                          },
                          {
                            "name": "name",
                            "type": "string",
                            "validator": "^[a-z0-9_-]+$",
                            "required": true,
                            "name-label": "Image repository name"
                          },
                          {
                            "name": "action",
                            "type": "list",
                            "help": "Docker command to monitor",
                            "options": {
                              "Push Image": "push"
                            },
                            "validator": "^(push)$",
                            "required": true,
                            "name-label": "Action"
                          }
                        ],
                        "filters": [
                          {
                            "name": "tag",
                            "type": "string",
                            "help": "RE2 regular expression",
                            "validator": "^.+$"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "triggers.types"
        ],
        "operationId": "triggers-types-list",
        "parameters": [],
        "summary": "Get a list of all existing trigger types",
        "x-sdk-interface": "triggers.types.list"
      }
    },
    "/hermes/types/{type}/{kind}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                },
                "examples": {
                  "successfulResponse": {
                    "summary": "Specific trigger type",
                    "value": {
                      "type": "registry",
                      "service-url": "http://production-nomios",
                      "kind": "dockerhub",
                      "uri-template": "registry:dockerhub:{{namespace}}:{{name}}:{{action}}",
                      "uri-regex": "^registry:dockerhub:[a-z0-9_-]+:[a-z0-9_-]+:push(:[[:xdigit:]]{12})$",
                      "help-url": "https://codefresh.io/docs/docs/pipeline-triggers/configure-dockerhub-trigger/",
                      "config": [
                        {
                          "name": "namespace",
                          "type": "string",
                          "help": "DockerHub username or organization name",
                          "validator": "^[a-z0-9_-]+$",
                          "required": true,
                          "name-label": "User/organization name"
                        },
                        {
                          "name": "name",
                          "type": "string",
                          "validator": "^[a-z0-9_-]+$",
                          "required": true,
                          "name-label": "Image repository name"
                        },
                        {
                          "name": "action",
                          "type": "list",
                          "help": "Docker command to monitor",
                          "options": {
                            "Push Image": "push"
                          },
                          "validator": "^(push)$",
                          "required": true,
                          "name-label": "Action"
                        }
                      ],
                      "filters": [
                        {
                          "name": "tag",
                          "type": "string",
                          "help": "RE2 regular expression",
                          "validator": "^.+$"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "triggers.types"
        ],
        "operationId": "triggers-types-get",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "example": "registry",
            "required": true,
            "description": "Trigger type"
          },
          {
            "in": "path",
            "name": "kind",
            "schema": {
              "type": "string"
            },
            "example": "dockerhub",
            "required": true,
            "description": "Kind of trigger type"
          }
        ],
        "summary": "Get a specific trigger type",
        "x-sdk-interface": "triggers.types.get"
      }
    },
    "/hermes/version": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-hermes-version",
        "parameters": [],
        "summary": "Get hermes version",
        "x-sdk-interface": "version.getHermesVersion"
      }
    },
    "/images": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/image"
                  },
                  "example": {
                    "docs": [
                      {
                        "_id": "0000000000000000000000000000000000000000",
                        "created": "2019-11-25T11:01:38.501Z",
                        "imageName": "codefresh/image",
                        "branch": "master",
                        "sha": "0000000000000000000000000000000000000000",
                        "commit": "commit message",
                        "commitURL": "https://github.com/username/repo/commit/0000000000000000000000000000000000000000",
                        "tags": [],
                        "service": {
                          "_id": "000000000000000000000000",
                          "name": "username/repo/repo"
                        },
                        "imageDisplayName": "username/repo",
                        "size": 666666666,
                        "repo": "username/repo"
                      }
                    ],
                    "total": 1,
                    "limit": 10,
                    "offset": 0
                  }
                }
              }
            },
            "description": "list of images"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "metadata",
            "schema": {
              "type": "string"
            },
            "description": "Metadata"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Tag"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Type"
          },
          {
            "in": "query",
            "name": "branch",
            "schema": {
              "type": "string"
            },
            "description": "Branch"
          },
          {
            "in": "query",
            "name": "imageDisplayNameRegex",
            "schema": {
              "type": "string"
            },
            "description": "Image display name regex"
          },
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string"
            },
            "description": "Select"
          },
          {
            "in": "query",
            "name": "sha",
            "schema": {
              "type": "string"
            },
            "description": "Sha"
          },
          {
            "in": "query",
            "name": "internalImageId",
            "schema": {
              "type": "string"
            },
            "description": "internal image id"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "images.list"
      }
    },
    "/images/external": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-add-from-external-source",
        "summary": "Add from external source",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Id": {
                    "type": "string"
                  },
                  "Digest": {
                    "type": "string"
                  },
                  "Image": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-sdk-interface": "images.addFromExternalSource"
      }
    },
    "/images/{imageId}/promote": {
      "post": {
        "x-entityId": {
          "pathId": "params.imageId",
          "pathName": "body.imageName"
        },
        "x-action": "promoteImage",
        "x-sdk-interface": "images.promote",
        "operationId": "images-promote",
        "summary": "Promote an image",
        "parameters": [
          {
            "description": "id of the Image",
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ]
      }
    },
    "/images/{id}": {
      "get": {
        "parameters": [
          {
            "description": "id of the Image",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed info for image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                },
                "example": {
                  "buildDetails": {
                    "progressId": "000000000000000000000000",
                    "id": "000000000000000000000000",
                    "type": "yaml"
                  },
                  "systemInvalid": false,
                  "_id": "0000000000000000000000000000000000000000",
                  "hash": "0000000000000000000000000000000000000000",
                  "created": "2019-11-25T11:01:38.501Z",
                  "status": "ready",
                  "imageName": "user-name/repo-name",
                  "branch": "master",
                  "sha": "0000000000000000000000000000000000000000",
                  "commit": "added resources to limit mem usage",
                  "commitURL": "https://github.com/user-name/repo-name/commit/0000000000000000000000000000000000000000",
                  "user": {
                    "key": {
                      "key": "",
                      "pubKey": ""
                    },
                    "roles": [
                      "User",
                      "Admin"
                    ],
                    "account": [
                      "000000000000000000000000"
                    ],
                    "customer": [],
                    "status": "new",
                    "settings": {
                      "sendWeeklyReport": true
                    },
                    "_id": "000000000000000000000000",
                    "userName": "test-username",
                    "email": "test-mail@example.com",
                    "defaultAccount": 2,
                    "user_data": {
                      "email": "test-mail@example.com",
                      "emails": [
                        "test-mail@example.com"
                      ],
                      "id": "test-username",
                      "name": null,
                      "image": "https://avatars0.githubusercontent.com/u/0?v=4"
                    },
                    "register_date": "2016-02-06T11:21:08.054Z",
                    "last_login_date": "2018-08-20T13:37:46.540Z",
                    "notifications": [
                      {
                        "events": [
                          "build-success",
                          "build-failure"
                        ],
                        "type": "mail"
                      }
                    ],
                    "logins": [
                      {
                        "credentials": {
                          "permissions": []
                        },
                        "userId": "000000",
                        "userName": "test-user"
                      }
                    ],
                    "shortProfile": {
                      "userName": "test-user"
                    },
                    "publicProfile": {
                      "_id": "000000000000000000000000",
                      "userName": "test-user",
                      "email": "test-mail@example.com",
                      "roles": [
                        "User",
                        "Admin"
                      ],
                      "defaultAccount": 2,
                      "account": [
                        "000000000000000000000000"
                      ],
                      "status": "new",
                      "user_data": {
                        "email": "test-mail@example.com",
                        "emails": [
                          "test-mail@example.com"
                        ],
                        "id": "test-user",
                        "name": null,
                        "image": "https://avatars0.githubusercontent.com/u/0?v=4"
                      },
                      "register_date": "2016-02-06T11:21:08.054Z",
                      "last_login_date": "2018-08-20T13:37:46.540Z",
                      "hasPassword": false,
                      "notifications": [
                        {
                          "events": [
                            "build-success",
                            "build-failure"
                          ],
                          "type": "mail"
                        }
                      ],
                      "shortProfile": {
                        "userName": "kosta709"
                      },
                      "settings": {
                        "sendWeeklyReport": true
                      },
                      "logins": [
                        {
                          "userId": "0",
                          "userName": "test-user",
                          "personalGit": false,
                          "permissions": []
                        }
                      ]
                    },
                    "token": {
                      "_id": "000000000000000000000000"
                    },
                    "id": "000000000000000000000000"
                  },
                  "account": "000000000000000000000000",
                  "dockerFile": "FROM alpine:latest\nRUN echo test",
                  "provider": "github",
                  "tags": [],
                  "service": {
                    "_id": "000000000000000000000000",
                    "name": "user-name/repo-name/repo-name"
                  },
                  "imageDisplayName": "user-name/repo-name",
                  "internalImageId": "0000000000000000000000000000000000000000000000000000000000",
                  "size": 556672382,
                  "info": {},
                  "internalName": "gcr.io/test-name/test-repo/test-image@sha256:0000000000000000000000000000000000000000000000000000000000",
                  "__v": 0
                }
              }
            }
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get",
        "summary": "Get",
        "x-sdk-interface": "images.get"
      }
    },
    "/images/{id}/tags": {
      "get": {
        "parameters": [
          {
            "description": "name of the image",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get-tags",
        "summary": "Get tags",
        "x-sdk-interface": "images.getTags"
      }
    },
    "/images/{imageId}/tag/{tagName}": {
      "post": {
        "x-action": "addTagToImage",
        "x-entityId": "params.imageId",
        "parameters": [
          {
            "description": "image ObjectId",
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tag",
            "in": "path",
            "name": "tagName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-tag",
        "summary": "Tag",
        "x-sdk-interface": "images.tag"
      },
      "delete": {
        "x-action": "imageTagDeleted",
        "x-entityId": "params.imageId",
        "parameters": [
          {
            "description": "tag ObjectId",
            "in": "path",
            "name": "tagName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "imageId",
            "schema": {
              "type": "object"
            },
            "description": "imageId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-untag",
        "summary": "Untag",
        "x-sdk-interface": "images.untag"
      }
    },
    "/images/{dockerImageId}/metadata": {
      "get": {
        "parameters": [
          {
            "description": "id of the Image (from docker inspect)",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get-metadata",
        "summary": "Get metadata",
        "x-sdk-interface": "images.getMetadata"
      },
      "post": {
        "parameters": [
          {
            "description": "id of the Image (from docker inspect)",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-upsert-metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "CF_QUALITY": {
                    "default": true,
                    "type": "boolean"
                  },
                  "comment": {
                    "default": "image for qa",
                    "type": "string"
                  },
                  "coverage": {
                    "default": "60%",
                    "type": "string"
                  },
                  "failed_tests": {
                    "default": 7,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Upsert metadata",
        "x-sdk-interface": "images.upsertMetadata"
      }
    },
    "/images/{dockerImageId}/metadata/{keyName}": {
      "delete": {
        "parameters": [
          {
            "description": "id of the Image from docker inspect",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the metadata key",
            "in": "path",
            "name": "keyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-delete-metadata",
        "summary": "Delete metadata",
        "x-sdk-interface": "images.deleteMetadata"
      }
    },
    "/idp/account": {
      "post": {
        "x-action": "createAccountIdp",
        "x-audit": {
          "name": {
            "path": "body.displayName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "account"
        ],
        "operationId": "account-create-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create account IDP",
        "x-sdk-interface": "account.createIdp"
      },
      "put": {
        "x-action": "updateAccountIdp",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "account"
        ],
        "operationId": "account-update-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "_id",
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "account.updateIdp"
      },
      "delete": {
        "x-action": "deleteAccountIdp",
        "x-entityId": {
          "pathId": "body.id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "account"
        ],
        "operationId": "account-delete-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "_id",
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Delete IDP",
        "x-sdk-interface": "account.deleteIdp"
      }
    },
    "/idp/customer/{customerId}": {
      "post": {
        "x-action": "createCustomerIdp",
        "x-audit": {
          "name": {
            "path": "body.displayName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-create-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create IDP",
        "x-sdk-interface": "customer.createIdp"
      },
      "put": {
        "x-action": "updateCustomerIdp",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-update-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "_id",
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "customer.updateIdp"
      },
      "delete": {
        "x-action": "deleteCustomerIdp",
        "x-entityId": "body.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-delete-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "summary": "Delete IDP",
        "x-sdk-interface": "customer.deleteIdp"
      }
    },
    "/idp/customer/{customerId}/addAccounts": {
      "post": {
        "x-action": "addAccountToCustomerIdp",
        "x-entityId": "body.ssoConfigId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-add-account-to-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add account to IDP",
        "x-sdk-interface": "customer.AddAccountToIdp"
      }
    },
    "/idp/customer/{customerId}/deleteAccounts": {
      "delete": {
        "x-action": "removeAccountFromCustomerIdp",
        "x-entityId": "body.ssoConfigId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-remove-account-from-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "summary": "Remove account from customer idp",
        "x-sdk-interface": "customer.removeAccountFromIdp"
      }
    },
    "/kubernetes/nodes": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-get-nodes-list",
        "parameters": [
          {
            "name": "selector",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "selector of cluster"
          }
        ],
        "summary": "Get cluster nodes",
        "x-sdk-interface": "kubernetes.getNodes"
      }
    },
    "/kubernetes/release/service": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-get-release-services",
        "parameters": [
          {
            "name": "selector",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "selector of cluster"
          },
          {
            "name": "release",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "release name"
          }
        ],
        "summary": "Get release services",
        "x-sdk-interface": "kubernetes.getReleaseServices",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getReleaseServices"
        }
      }
    },
    "/kubernetes/test": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-test-credentials",
        "parameters": [],
        "summary": "Test Cluster Credentials",
        "x-sdk-interface": "kubernetes.testClusterCredentials",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.testClusterCredentials"
        }
      }
    },
    "/kubernetes/test/{selector}": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-test-existed-credentials",
        "parameters": [
          {
            "in": "path",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "cluster selector",
            "required": true
          }
        ],
        "summary": "Test Existed Cluster Credentials",
        "x-sdk-interface": "kubernetes.testExistedClusterCredentials",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.testExistedClusterCredentials"
        }
      }
    },
    "/kubernetes/services": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-list-services",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "cluster selector",
            "required": true
          }
        ],
        "summary": "List services",
        "x-sdk-interface": "kubernetes.services.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getServices"
        }
      }
    },
    "/kubernetes/namespaces": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-list-namespaces",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "cluster selector",
            "required": true
          }
        ],
        "summary": "List namespaces",
        "x-sdk-interface": "kubernetes.namespaces.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getNamespaces"
        }
      }
    },
    "/kubernetes/podGroups": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-list-pod-groups",
        "parameters": [],
        "summary": "List pod groups",
        "x-sdk-interface": "kubernetes.podGroups.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getPodGroups"
        }
      }
    },
    "/kubernetes/deployments/{name}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-describe-deployment",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "deployment name",
            "required": true
          }
        ],
        "summary": "Describe deployment",
        "x-sdk-interface": "kubernetes.deployments.describe",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.describeDeployment"
        }
      }
    },
    "/kubernetes/releases": {
      "get": {
        "responses": {
          "200": {
            "description": "List of releases for cluster",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/kubernetes_release"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-list-releases",
        "parameters": [
          {
            "name": "selector",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "selector of cluster"
          }
        ],
        "summary": "List helm releases",
        "x-sdk-interface": "kubernetes.releases.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getHelmReleases"
        }
      }
    },
    "/kubernetes/releases/{releaseName}/delete": {
      "post": {
        "x-entityId": {
          "pathName": "params.releaseName"
        },
        "x-action": "helmReleaseDeleted",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.releases",
          "kubernetes"
        ],
        "operationId": "helm-releases-delete",
        "parameters": [
          {
            "in": "path",
            "name": "releaseName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Release name"
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Delete",
        "x-sdk-interface": "helm.releases.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.deleteRelease"
        }
      }
    },
    "/kubernetes/releases/{releaseName}/test": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.releases",
          "kubernetes"
        ],
        "operationId": "helm-releases-test",
        "parameters": [
          {
            "in": "path",
            "name": "releaseName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Release name"
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "Selector"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Test",
        "x-sdk-interface": "helm.releases.test",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "preMiddleware": [
            "kubernetes.resolveClustersFromQuery",
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.testRelease"
        }
      }
    },
    "/k8s/chart": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "k8s-bf-proxy-get-chart",
        "parameters": [
          {
            "name": "selector",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "selector of cluster"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Release name"
          },
          {
            "name": "version",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Release version"
          }
        ],
        "summary": "Proxy get",
        "x-sdk-interface": "k8s.bf.proxyGetChart",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "chart",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "read"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getChartData"
        }
      }
    },
    "/k8s/releases/withoutSecrets": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "k8s-bf-proxy-get-releases-without-secrets",
        "parameters": [
          {
            "name": "selector",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "selector of cluster"
          }
        ],
        "summary": "Proxy get",
        "x-sdk-interface": "k8s.bf.proxyGetReleasesWithoutSecrets",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "chart",
              "abacSource": "kubernetes",
              "action": "read"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getHelmReleasesWithoutSecrets"
        }
      }
    },
    "/k8s/releases/{releaseName}/{revision}/chart": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "k8s-proxy-get-chart",
        "parameters": [
          {
            "in": "path",
            "name": "releaseName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Release name"
          },
          {
            "in": "path",
            "name": "revision",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Revision"
          }
        ],
        "summary": "Proxy get",
        "x-sdk-interface": "k8s.proxyGetChart",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "chart",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "read"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      }
    },
    "/k8s/releases/{releaseName}/{revision}/values": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "k8s-proxy-get-values",
        "parameters": [
          {
            "in": "path",
            "name": "releaseName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Release name"
          },
          {
            "in": "path",
            "name": "revision",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Revision"
          }
        ],
        "summary": "Proxy get",
        "x-sdk-interface": "k8s.proxyGetValues",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "chart",
              "abacSource": "kubernetes",
              "abac": true,
              "action": "read"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      }
    },
    "/kubernetes/secrets/imagePullSecret": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-generate-image-pull-secret",
        "parameters": [
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Namespace"
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Selector"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Generate image pull secret",
        "x-sdk-interface": "kubernetes.generateImagePullSecret",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.resolveClustersFromQuery",
            "kubernetes.extendBodyWithAccountRegistries",
            "kubernetes.filterRegistriesByName",
            "kubernetes.decryptRegistryCredentials"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      }
    },
    "/kubernetes/chart/install/helm3": {
      "post": {
        "x-entityId": {
          "pathName": "body.releaseName"
        },
        "x-action": "installHelm3Release",
        "responses": {
          "200": {
            "description": "Id of running pipeline for install helm release",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "helm.charts",
          "kubernetes"
        ],
        "operationId": "helm-charts-install-helm3",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "releaseName": {
                    "type": "string"
                  },
                  "set": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "repository": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Install",
        "x-sdk-interface": "helm.charts.install.new",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion",
            "kubernetes.extendRequestWithClusterConfig"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.installChartHelm3"
        }
      }
    },
    "/kubernetes/chart/install": {
      "post": {
        "x-entityId": {
          "pathName": "body.releaseName"
        },
        "x-action": "installHelmRelease",
        "responses": {
          "200": {
            "description": "Id of running pipeline for install helm release",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "helm.charts",
          "kubernetes"
        ],
        "operationId": "helm-charts-install",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "releaseName": {
                    "type": "string"
                  },
                  "set": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "repository": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Install",
        "x-sdk-interface": "helm.charts.install",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.installChart"
        }
      }
    },
    "/kubernetes/chart/promote/helm3": {
      "post": {
        "x-entityId": {
          "pathName": "body.releaseName"
        },
        "x-action": "promoteHelm3Release",
        "responses": {
          "200": {
            "description": "Id of running pipeline for promote helm release",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "helm.charts",
          "kubernetes"
        ],
        "operationId": "helm-charts-promote-helm3",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetTillerNamespace": {
                    "type": "string"
                  },
                  "targetNamespace": {
                    "type": "string"
                  },
                  "releaseName": {
                    "type": "string"
                  },
                  "targetReleaseName": {
                    "type": "string"
                  },
                  "set": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "targetSelector": {
                    "type": "string"
                  },
                  "revision": {
                    "type": "string"
                  },
                  "pipelineId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Promote",
        "x-sdk-interface": "helm.charts.promote.new",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromBoards",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update",
              "identifiersLocation": "body.targetSelector"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion",
            "kubernetes.extendRequestWithClusterConfig"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "kubernetes.promoteChartHelm3"
        }
      }
    },
    "/kubernetes/chart/promote": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.charts"
        ],
        "operationId": "helm-charts-promote",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Promote",
        "x-sdk-interface": "helm.charts.promote",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromBoards",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.promoteChart"
        }
      }
    },
    "/kubernetes/rollback/{release}/{revision}": {
      "get": {
        "responses": {
          "200": {
            "description": "id of pipeline with rollback",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-rollback-release",
        "parameters": [
          {
            "in": "path",
            "name": "release",
            "schema": {
              "type": "string"
            },
            "description": "release",
            "required": true
          },
          {
            "in": "path",
            "name": "revision",
            "schema": {
              "type": "string"
            },
            "description": "revision",
            "required": true
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Promote",
        "x-sdk-interface": "kubernetes.rollback",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.rollback"
        }
      }
    },
    "/kubernetes/rollback/builds/{selector}/{release}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-rollback-builds-list",
        "parameters": [
          {
            "in": "path",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "selector",
            "required": true
          },
          {
            "in": "path",
            "name": "release",
            "schema": {
              "type": "string"
            },
            "description": "release",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Promote",
        "x-sdk-interface": "kubernetes.rollback.builds.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.getRollbackRevisionBuilds"
        }
      }
    },
    "/kubernetes*": {
      "head": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-head",
        "parameters": [
        ],
        "summary": "Proxy head",
        "x-sdk-interface": "kubernetes.proxyHead",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "options": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-options",
        "parameters": [
        ],
        "summary": "Proxy options",
        "x-sdk-interface": "kubernetes.proxyOptions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-get",
        "parameters": [
        ],
        "summary": "Proxy get",
        "x-sdk-interface": "kubernetes.proxyGet",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-post",
        "parameters": [
        ],
        "summary": "Proxy post",
        "x-sdk-interface": "kubernetes.proxyPost",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "kubernetes-proxy-put",
        "parameters": [
        ],
        "summary": "Proxy put",
        "x-sdk-interface": "kubernetes.proxyPut",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "patch": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-patch",
        "parameters": [
        ],
        "summary": "Proxy patch",
        "x-sdk-interface": "kubernetes.proxyPatch",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "delete": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-delete",
        "parameters": [
        ],
        "summary": "Proxy delete",
        "x-sdk-interface": "kubernetes.proxyDelete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      }
    },
    "/charts/{repo}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "charts"
        ],
        "operationId": "charts-list",
        "parameters": [
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Repo"
          }
        ],
        "summary": "Get charts by repo",
        "x-sdk-interface": "charts.list"
      }
    },
    "/nomios/version": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-nomios-version",
        "parameters": [],
        "summary": "Get nomios version",
        "x-sdk-interface": "version.getNomiosVersion"
      }
    },
    "/payments": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "payments.list"
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "couponId": {
                    "type": "string"
                  },
                  "plan": {
                    "properties": {
                      "builds": {
                        "default": 2,
                        "type": "integer"
                      },
                      "environments": {
                        "default": 2,
                        "type": "integer"
                      },
                      "id": {
                        "default": "BASIC",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "token": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "payments.create"
      }
    },
    "/payments/plans": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-get-plans",
        "summary": "Get plans",
        "parameters": [],
        "x-sdk-interface": "payments.getPlans"
      }
    },
    "/pipelines": {
      "get": {
        "description": "List pipelines - optional filters i.e. ?isPublic=true&offset=2&limit=1",
        "summary": "List pipelines",
        "responses": {
          "200": {
            "description": "List of pipelines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipelines"
                },
                "example": {
                  "docs": [
                    {
                      "metadata": {
                        "name": "simple/hello",
                        "project": "simple",
                        "projectId": "60211c5100c1c3cfb750eb30",
                        "revision": 5,
                        "accountId": "5f4ba70669653e7fdbd82816",
                        "created_at": "2021-02-09T10:21:01.083Z",
                        "updated_at": "2021-02-09T16:20:17.626Z",
                        "deprecate": {},
                        "labels": {
                          "tags": []
                        },
                        "originalYamlString": "# More examples of Codefresh YAML can be found at\n# https://codefresh.io/docs/docs/yaml-examples/examples/\n\nversion: \"1.0\"\n# Stages can help you organize your steps in stages\nstages:\n  - \"clone\"\n  - \"build\"\n  - \"test\"\n\nsteps:\n   Freestyle:\n     title: Running docker image\n     type: freestyle\n     working_directory: '.'\n     arguments:\n       image: 'alpine'\n       commands:\n         - echo \"fdfdffd\"\n         - ls -ltr\n         - echo $(pwd)\n",
                        "id": "6022620d45370a8d0661446c"
                      },
                      "version": "1.0",
                      "kind": "pipeline",
                      "spec": {
                        "triggers": [],
                        "stages": [
                          "test"
                        ],
                        "variables": [],
                        "contexts": [],
                        "terminationPolicy": [],
                        "externalResources": [],
                        "steps": {
                          "Freestyle": {
                            "title": "Running docker image",
                            "type": "freestyle",
                            "working_directory": ".",
                            "arguments": {
                              "image": "alpine",
                              "commands": [
                                "echo \"hello\"",
                                "ls -ltr",
                                "echo $(pwd)"
                              ]
                            }
                          }
                        }
                      },
                      "last_executed": "2021-02-10T09:37:45.799Z"
                    }
                  ],
                  "count": 1
                }
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Optional offset, i.e, ?offset=1&limit=1 would retrieve the second pipeline in the results."
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "optional id, i.e. ?id=6022620d45370a8d0661446c "
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "optional limit=2, for limit number of pipelines in response"
          },
          {
            "in": "query",
            "name": "labels",
            "schema": {
              "type": "string"
            },
            "description": "optional labels to filter results by."
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "optional project id, i.e. projectId=60211c5100c1c3cfb750eb30"
          },
          {
            "in": "query",
            "name": "executionContextId",
            "schema": {
              "type": "string"
            },
            "description": "optional executionContextId id, i.e. executionContextId=60211c5100c1c3cfb750eb30"
          },
          {
            "in": "query",
            "name": "executionContextName",
            "schema": {
              "type": "string"
            },
            "description": "optional executionContextName, i.e. executionContextName='ec-name'"
          }
        ],
        "operationId": "pipelines-list",
        "x-sdk-interface": "pipelines.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "cache": {
            "entity": "pipelines",
            "type": "list",
            "evict": [
              {
                "event": "pipeline.updated",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              },
              {
                "event": "pipeline.created",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              },
              {
                "event": "pipeline.deleted",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              }
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getAllAccountPipelines"
        }
      },
      "post": {
        "summary": "Create a pipeline",
        "description": "Create a pipeline in the user's account, for updating existing pipeline use the replace: PUT /pipelines/$NAME",
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "metadata.id",
            "source": "res"
          }
        },
        "x-action": "createPipeline",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pipeline"
        },
        "responses": {
          "200": {
            "description": "Successful creation of a pipeline.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                },
                "example": {
                  "metadata": {
                    "name": "simple/newOne",
                    "project": "simple",
                    "projectId": "60211c5100c1c3cfb750eb30",
                    "revision": 0,
                    "accountId": "5f4ba70669653e7fdbd82816",
                    "labels": {
                      "tags": []
                    },
                    "originalYamlString": "version: \"1.0\"\nstages:\n  - \"clone\"\n  - \"build\"\n  - \"test\"\n\nsteps:\n   Freestyle:\n     title: Running docker image\n     type: freestyle\n     working_directory: .\n     arguments:\n       image: alpine\n       commands:\n         - echo \"new pipe\"\n         - ls -ltr\n         - echo $(pwd)\n",
                    "created_at": "2021-02-11T11:22:18.770Z",
                    "updated_at": "2021-02-11T11:22:18.770Z",
                    "id": "6025136a42e51b441eb9b1c8"
                  },
                  "version": "1.0",
                  "kind": "pipeline",
                  "spec": {
                    "triggers": [],
                    "stages": [
                      "clone",
                      "build",
                      "test"
                    ],
                    "variables": [],
                    "contexts": [],
                    "terminationPolicy": [],
                    "externalResources": [],
                    "steps": {
                      "Freestyle": {
                        "title": "Running docker image",
                        "type": "freestyle",
                        "working_directory": ".",
                        "arguments": {
                          "image": "alpine",
                          "commands": [
                            "echo \"new one\"",
                            "ls -ltr",
                            "echo $(pwd)"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Pipeline creation failed, cause: duplication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                },
                "example": {
                  "status": 409,
                  "code": "1003",
                  "name": "DUPLICATION_ERROR",
                  "message": "Error: Pipeline \"newOne\" already exists",
                  "context": {}
                }
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-create",
        "parameters": [],
        "x-sdk-interface": "pipelines.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.createPipeline"
        }
      }
    },
    "/pipelines/templates/{name}": {
      "post": {
        "description": "creates a template from existing pipeline",
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "metadata.id",
            "source": "res"
          }
        },
        "x-action": "createTemplateFromPipeline",
        "responses": {
          "200": {
            "description": "Successful create template from pipeline in project project by  using payload name:simple/fromPipeline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                },
                "example": {
                  "metadata": {
                    "name": "project/fromPipeline",
                    "revision": 0,
                    "projectId": "60211c5100c1c3cfb750eb30",
                    "accountId": "5f4ba70669653e7fdbd82816",
                    "created_at": "2021-02-21T08:52:03.632Z",
                    "labels": {
                      "tags": [
                        "hello",
                        "world"
                      ]
                    },
                    "updated_at": "2021-02-21T08:52:03.632Z",
                    "project": "simple",
                    "deprecate": {},
                    "template": {
                      "isTemplate": true
                    },
                    "originalYamlString": "version: '1.0'\nstages: []\nsteps:\n  Freestyle:\n    title: Running docker image\n    type: freestyle\n    working_directory: .\n    arguments:\n      image: alpine\n      commands:\n        - 'echo \"hello ${HELLO}\"'\n",
                    "id": "60321f33957824a67b38bd02"
                  },
                  "spec": {
                    "triggers": [],
                    "stages": [],
                    "variables": [
                      {
                        "key": "HELLOX",
                        "value": "WORLD",
                        "encrypted": false
                      },
                      {
                        "key": "Secret",
                        "value": "*****",
                        "encrypted": true
                      }
                    ],
                    "contexts": [],
                    "terminationPolicy": [],
                    "externalResources": [],
                    "steps": {
                      "Freestyle": {
                        "title": "Running docker image",
                        "type": "freestyle",
                        "working_directory": ".",
                        "arguments": {
                          "image": "alpine",
                          "commands": [
                            "echo \"hello ${HELLO}\""
                          ]
                        }
                      }
                    }
                  },
                  "version": "1.0",
                  "kind": "pipeline",
                  "last_executed": "2021-02-17T12:52:04.132Z"
                }
              }}
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-create-template-from-pipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the newly created pipeline",
                    "type": "string"
                  },
                  "description": {
                    "description": "The created template description",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Identifier or FullName  of the template pipeline i.e (6025136a42e51b441eb9b1c8 or project%2FtemplateName)",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Create template from pipeline",
        "x-sdk-interface": "pipelines.createTemplateFromPipeline",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.createTemplateFromPipeline"
        }
      }
    },
    "/pipelines/templates/{name}/setAsTemplate": {
      "post": {
        "description": "Set pipeline as template, The url specify the pipeline name (escaped) projectName%2fname or the pipeline id. To unTemplate the pipeline need to be updated and replaced ",
        "summary": "Set pipeline as template.",
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "metadata.id",
            "source": "res"
          }
        },
        "x-action": "SetPipelineAsTemplate",
        "responses": {
          "200": {
            "description": "Templating a pipeline, response having isTemplate: true ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                },
                "example": {
                  "metadata": {
                    "name": "simple/newOne",
                    "revision": 16,
                    "projectId": "60211c5100c1c3cfb750eb30",
                    "accountId": "5f4ba70669653e7fdbd82816",
                    "created_at": "2021-02-11T11:22:18.770Z",
                    "updated_at": "2021-02-16T14:35:29.484Z",
                    "project": "simple",
                    "template": {
                      "isTemplate": true
                    },
                    "id": "6025136a42e51b441eb9b1c8"
                  },
                  "spec": {
                    "triggers": [],
                    "stages": [],
                    "variables": [
                      {
                        "key": "HELLOX",
                        "value": "WORLD",
                        "encrypted": false
                      }
                    ],
                    "contexts": [],
                    "terminationPolicy": [],
                    "externalResources": [],
                    "steps": {
                      "Freestyle": {
                        "title": "Running docker image",
                        "type": "freestyle",
                        "working_directory": ".",
                        "arguments": {
                          "image": "alpine",
                          "commands": [
                            "echo \"hello ${HELLO}\"",
                            "ls -ltr",
                            "echo $(pwd)"
                          ]
                        }
                      }
                    }
                  },
                  "version": "1.0",
                  "kind": "pipeline",
                  "last_executed": "2021-02-11T12:57:57.668Z"
                }
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-set-as-template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Identifier of the pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "pipelines.setAsTemplate",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.setPipelineAsTemplate"
        }
      }
    },
    "/pipelines/templates": {
      "get": {
        "summary": "Get pipeline templates",
        "description": "Get pipeline templates",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "deprecated": true,
        "operationId": "pipelines-get-templates",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "x-sdk-interface": "pipelines.getTemplates",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getTemplates"
        }
      }
    },
    "/pipelines/exist": {
      "get": {
        "summary": "At least one pipeline exist in account",
        "description": "Internal endpoint",
        "responses": {
          "200": {
            "description": "When There is at least one pipeline, response is: true",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonString"
                },
                "example": true
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-exist",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "x-sdk-interface": "pipelines.pipelinesExist",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "disableAbac": true,
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.isPipelinesExist"
        }
      }
    },
    "/pipelines/analyze": {
      "post": {
        "x-hide": true,
        "summary": "Analyze pipeline",
        "description": "Auto generate a codefresh yaml by github repo metadata",
        "x-audit": {
          "name": {
            "path": "body.repo.repoName",
            "source": "req"
          },
          "id": {
            "path": "body.repo.repoName",
            "source": "res"
          }
        },
        "x-action": "analyzeRepo",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-analyze",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "x-sdk-interface": "analyze",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.analyze"
        }
      }
    },
    "/pipelines/labels": {
      "get": {
        "description": "Get pipelines by labels query - usually it would be empty [] or [\"tags\"] ",
        "summary": "Get pipelines labels",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                },
                "example": ["tags"]
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-labels",
        "parameters": [],
        "x-sdk-interface": "pipelines.getLabels",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getLabels"
        }
      }
    },
    "/pipelines/labels/{label}": {
      "get": {
        "summary": "Get by label - value array",
        "description": "Get distinct by distinct labels the values from pipelines - ie. /pipelines/labels/tags ",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                },
                "example": ["hello", "world"]
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-label-values",
        "parameters": [
          {
            "in": "path",
            "name": "label",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "label"
          }
        ],
        "x-sdk-interface": "pipelines.getLabelValues",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getLabelValues"
        }
      }
    },
    "/pipelines/names": {
      "get": {
        "summary": "Get pipelines",
        "description": "Get array of pipelines according to the query. Similar to Get  /pipelines.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "labels",
            "schema": {
              "type": "string"
            },
            "description": "Labels"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "project id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-names",
        "x-sdk-interface": "pipelines.getNames",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getAllAccountPipelinesNames"
        }
      }
    },
    "/pipelines/utils/extractVariables": {
      "get": {
        "description": "Extract variables from a Codefresh yaml (by providing the URL to retrieve the yaml from)",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-extract-variables-from-yaml",
        "parameters": [
          {
            "in": "query",
            "name": "yamlURL",
            "description": "url to retrieve yaml from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Extract variables from yaml",
        "x-sdk-interface": "pipelines.extractVariablesFromYaml",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.extractVariables"
        }
      }
    },
    "/pipelines/run": {
      "post": {
        "description": "Run a pipeline (can be used to restart a previous build)",
        "responses": {
          "200": {
            "description": "Run a pipeline and return the new build ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonString"
                },
                "example": "602d10fdbfbd9b04e58e3ed0"
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-run-yaml",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "previousWorkflow": {
                    "type": "object",
                    "description": "An object that describes the previous build that should be restarted",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the build that should be restarted"
                      }
                    }
                  },
                  "branch": {
                    "type": "string",
                    "description": "Git branch to simulate a triggered build"
                  },
                  "trigger": {
                    "type": "string",
                    "description": "An ID of a pipeline's trigger to simulate a triggered build"
                  },
                  "variables": {
                    "type": "object",
                    "description": "An object with environment variables where key is the name of the environment variable, and value is the it's value"
                  },
                  "options": {
                    "type": "object",
                    "description": "An object with pipeline options",
                    "properties": {
                      "noCache": {
                        "type": "boolean",
                        "description": "Ignore Docker engine cache for build (false by default)"
                      },
                      "noCfCache": {
                        "type": "boolean",
                        "description": "Ignore Codefresh cache optimizations for build (false by default)"
                      },
                      "resetVolume": {
                        "type": "boolean",
                        "description": "Reset pipeline's volume (false by default)"
                      },
                      "enableNotifications": {
                        "type": "boolean",
                        "description": "Report notification on pipeline execution"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Run pipeline",
        "x-sdk-interface": "pipelines.runYaml",
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "description": "Run a pipeline",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/pipelines/run/{name}": {
      "post": {
        "x-action": "runPipeline",
        "x-entityId": {
          "pathName": "params.name"
        },
        "x-allowed": {
          "body": [
            "branch",
            "serviceName",
            "type",
            "serviceId"
          ]
        },
        "description": "Run a pipeline by ID / full name (including project name)",
        "responses": {
          "200": {
            "description": "Run a pipeline and return the new build ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonString"
                },
                "example": "602d10fdbfbd9b04e58e3ed0"
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-run",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch": {
                    "type": "string",
                    "description": "Git branch to simulate a triggered build"
                  },
                  "trigger": {
                    "type": "string",
                    "description": "An ID of a pipeline's trigger to simulate a triggered build"
                  },
                  "variables": {
                    "type": "object",
                    "description": "An object with environment variables where key is the name of the environment variable, and value is the it's value"
                  },
                  "options": {
                    "type": "object",
                    "description": "An object with pipeline options",
                    "properties": {
                      "noCache": {
                        "type": "boolean",
                        "description": "Ignore Docker engine cache for build (false by default)"
                      },
                      "noCfCache": {
                        "type": "boolean",
                        "description": "Ignore Codefresh cache optimizations for build (false by default)"
                      },
                      "resetVolume": {
                        "type": "boolean",
                        "description": "Reset pipeline's volume (false by default)"
                      },
                      "enableNotifications": {
                        "type": "boolean",
                        "description": "Report notification on pipeline execution"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Run pipeline by name / ID",
        "x-sdk-interface": "pipelines.run",
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "description": "Run a pipeline",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/pipelines/debug/{name}": {
      "post": {
        "x-action": "debugPipeline",
        "x-entityId": {
          "pathName": "params.name"
        },
        "x-allowed": {
          "body": [
            "branch",
            "serviceName",
            "type",
            "serviceId"
          ]
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "description": "Run pipeline in debug mode, and retrieve id of created pipeline",
        "operationId": "pipelines-debug",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch": {
                    "type": "string",
                    "description": "Git branch to simulate a triggered build"
                  },
                  "trigger": {
                    "type": "string",
                    "description": "An ID of a pipeline's trigger to simulate a triggered build"
                  },
                  "variables": {
                    "type": "object",
                    "description": "An object with environment variables where key is the name of the environment variable, and value is the it's value"
                  },
                  "options": {
                    "type": "object",
                    "description": "An object with pipeline options",
                    "properties": {
                      "noCache": {
                        "type": "boolean",
                        "description": "Ignore Docker engine cache for build (false by default)"
                      },
                      "noCfCache": {
                        "type": "boolean",
                        "description": "Ignore Codefresh cache optimizations for build (false by default)"
                      },
                      "resetVolume": {
                        "type": "boolean",
                        "description": "Reset pipeline's volume (false by default)"
                      },
                      "enableNotifications": {
                        "type": "boolean",
                        "description": "Report notification on pipeline execution"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Run pipeline in debug mode",
        "x-sdk-interface": "pipelines.debug",
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "debug",
              "description": "Debug a pipeline",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.debugPipeline"
        }
      }
    },
    "/pipelines/yaml/validator": {
      "post": {
        "description": "Internal endpoint",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-validate-yaml",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Validate yaml",
        "x-sdk-interface": "pipelines.validateYaml",
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.yamlValidator"
        }
      }
    },
    "/pipelines/yaml/test-url": {
      "get": {
        "description": "Internal endpoint",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-test-yaml-from-url",
        "parameters": [],
        "summary": "Test yaml from url",
        "x-sdk-interface": "pipelines.testYamlFromUrl",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.testYamlFromUrl"
        }
      }
    },
    "/pipelines/templates/deploy-images": {
      "get": {
        "description": "Internal endpoint",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-deploy-images",
        "parameters": [],
        "summary": "Get deploy images",
        "x-sdk-interface": "pipelines.getDeployImages",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getDeployImages"
        }
      }
    },
    "/pipelines/clone/variables/{name}/{originPipelineName}": {
      "put": {
        "description": "Internal endpoint",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-clone-variables",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "path",
            "name": "originPipelineName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name of the pipeline from which to clone"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Clone variables",
        "x-sdk-interface": "pipelines.cloneVariables",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacOptions": [
                {
                  "identifiersLocation": "params.originPipelineName",
                  "action": "read"
                },
                {
                  "action": "update"
                }
              ],
              "description": "Clone pipeline variables"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.clonePipelineVariables"
        }
      }
    },
    "/pipelines/projects/all": {
      "get": {
        "description": "Internal endpoint",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-project-names",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Test yaml from url",
        "x-sdk-interface": "pipelines.getProjects",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getProjects"
        }
      }
    },
    "/pipelines/{name}":  {
      "get": {
        "description": "Get pipeline data from the account by name or id, specifing ?decryptVariables=true would show the variable value rather then {\"key\":\"Secret\",\"value\":\"*****\",\"encrypted\":true}  ",
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "decryptVariables",
            "schema": {
              "type": "string"
            },
            "description": "Decrypt variables"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful search by name/or id, by calling /api/pipelines/simple%2FnewOne  (the slash was escaped)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                },
                "example": {
                  "metadata": {
                    "name": "simple/newOne",
                    "project": "simple",
                    "projectId": "60211c5100c1c3cfb750eb30",
                    "revision": 0,
                    "accountId": "5f4ba70669653e7fdbd82816",
                    "labels": {
                      "tags": []
                    },
                    "originalYamlString": "version: \"1.0\"\nstages:\n  - \"clone\"\n  - \"build\"\n  - \"test\"\n\nsteps:\n   Freestyle:\n     title: Running docker image\n     type: freestyle\n     working_directory: .\n     arguments:\n       image: alpine\n       commands:\n         - echo \"new pipe\"\n         - ls -ltr\n         - echo $(pwd)\n",
                    "created_at": "2021-02-11T11:22:18.770Z",
                    "updated_at": "2021-02-11T11:22:18.770Z",
                    "id": "6025136a42e51b441eb9b1c8"
                  },
                  "version": "1.0",
                  "kind": "pipeline",
                  "spec": {
                    "triggers": [],
                    "stages": [
                      "clone",
                      "build",
                      "test"
                    ],
                    "variables": [],
                    "contexts": [],
                    "terminationPolicy": [],
                    "externalResources": [],
                    "steps": {
                      "Freestyle": {
                        "title": "Running docker image",
                        "type": "freestyle",
                        "working_directory": ".",
                        "arguments": {
                          "image": "alpine",
                          "commands": [
                            "echo \"new one\"",
                            "ls -ltr",
                            "echo $(pwd)"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed to find non existing pipeline.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipelineError"
                },
                "example": {
                  "status": 404,
                  "code": "4201",
                  "name": "PIPELINE_NOT_FOUND_ERROR",
                  "message": "Could not find pipeline: simple/noOne",
                  "context": {
                    "id": "simple/noOne"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get",
        "summary": "Get pipeline data from the account by name or id ",
        "x-sdk-interface": "pipelines.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "cache": {
            "entity": "pipelines",
            "type": "single",
            "identifier": "params.name",
            "evict": [
              {
                "event": "pipeline.updated",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              },
              {
                "event": "pipeline.deleted",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              }
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getPipelineByNameOrId"
        }
      },
      "put": {
        "description": "Replace a pipeline by ID or name and payload provided, updated pipeline in response. The payload should be modified Get since the revision is checked ",
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updatePipeline",
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "should skip trigger validation",
            "in": "query",
            "name": "skipTriggerValidation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "allows to omit revision validation - will use revision of existing pipeline",
            "in": "query",
            "name": "disableRevisionCheck",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {
                      "variables": {
                        "type": "array",
                        "x-secure": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "triggers": {
                        "type": "array",
                        "x-secure": {
                          "type": "array",
                          "fields": [
                            "secret"
                          ]
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update of a pipeline.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                },
                "example": {
                  "metadata": {
                    "name": "simple/newOnex",
                    "revision": 6,
                    "projectId": "60211c5100c1c3cfb750eb30",
                    "accountId": "5f4ba70669653e7fdbd82816",
                    "created_at": "2021-02-11T11:22:18.770Z",
                    "updated_at": "2021-02-16T12:15:39.078Z",
                    "project": "simple",
                    "id": "6025136a42e51b441eb9b1c8"
                  },
                  "kind": "pipeline",
                  "spec": {
                    "triggers": [],
                    "stages": [],
                    "variables": [
                      {
                        "key": "HELLOX",
                        "value": "WORLD",
                        "encrypted": false
                      }
                    ],
                    "contexts": [],
                    "terminationPolicy": [],
                    "externalResources": [],
                    "steps": {
                      "Freestyle": {
                        "title": "Running docker image",
                        "type": "freestyle",
                        "working_directory": ".",
                        "arguments": {
                          "image": "alpine",
                          "commands": [
                            "echo \"hello ${HELLO}\"",
                            "ls -ltr",
                            "echo $(pwd)"
                          ]
                        }
                      }
                    }
                  },
                  "version": "1.0",
                  "last_executed": "2021-02-11T12:57:57.668Z"
                }
              }
            }
          },
          "404": {
            "description": "Failed update find non existing pipeline.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipelineError"
                },
                "example": {
                  "status": 404,
                  "code": "4201",
                  "name": "PIPELINE_NOT_FOUND_ERROR",
                  "message": "Could not find pipeline: simple/newOne",
                  "context": {
                    "id": "simple/newOne"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed update - pipeline outdated, revision not matched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipelineError"
                },
                "example": {"status":400,"code":"4204","name":"PIPELINE_OUTDATED_ERROR","message":"Error: You are editing an outdated pipeline. Please refresh the state of the pipeline","context":{}}
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-replace",
        "summary": "Replace a pipeline by ID or name",
        "x-sdk-interface": "pipelines.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.replacePipelineByName"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deletePipeline",
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update of a pipeline simple%2FnewOne, by default the revision cnt increased.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                },
                "example": {
                  "metadata": {
                    "name": "simple/newOne",
                    "project": "simple",
                    "projectId": "60211c5100c1c3cfb750eb30",
                    "revision": 1,
                    "accountId": "5f4ba70669653e7fdbd82816",
                    "labels": {
                      "tags": []
                    },
                    "created_at": "2021-02-11T11:22:18.770Z",
                    "updated_at": "2021-02-11T12:46:36.285Z",
                    "originalYamlString": "version: \"1.0\"\nstages:\n  - \"clone\"\n  - \"build\"\n  - \"test\"\n\nsteps:\n   Freestyle:\n     title: Running docker image\n     type: freestyle\n     working_directory: .\n     arguments:\n       image: alpine\n       commands:\n         - echo \"changed pipe\"\n         - ls -ltr\n         - echo $(pwd)\n",
                    "id": "6025136a42e51b441eb9b1c8"
                  },
                  "version": "1.0",
                  "kind": "pipeline",
                  "spec": {
                    "triggers": [],
                    "stages": [
                      "clone",
                      "build",
                      "test"
                    ],
                    "variables": [],
                    "contexts": [],
                    "terminationPolicy": [],
                    "externalResources": [],
                    "steps": {
                      "Freestyle": {
                        "title": "Running docker image",
                        "type": "freestyle",
                        "working_directory": ".",
                        "arguments": {
                          "image": "alpine",
                          "commands": [
                            "echo \"changed one\"",
                            "ls -ltr",
                            "echo $(pwd)"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed delete, pipeline was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipelineError"
                },
                "example": {
                  "status": 404,
                  "code": "4201",
                  "name": "PIPELINE_NOT_FOUND_ERROR",
                  "message": "Could not find pipeline: simple/newOne",
                  "context": {
                    "id": "simple/newOne"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-delete",
        "summary": "Delete a pipeline by ID or name",
        "x-sdk-interface": "pipelines.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.deletePipelineByName"
        }
      },
      "post": {
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "metadata.id",
            "source": "res"
          }
        },
        "x-action": "createPipelineFromTemplate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                }
              }
            },
            "description": "create pipeline from template"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-create-pipeline-from-template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Created pipeline name",
                    "type": "string"
                  },
                  "project": {
                    "description": "Project name, under which the pipeline is created",
                    "type": "string"
                  },
                  "description": {
                    "description": "Created pipeline description",
                    "type": "string"
                  },
                  "isTemplate": {
                    "description": "Flag isTemplate, when set the pipeline can be used as template for creation of other templates",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "identifier of the pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Create pipeline from template",
        "x-sdk-interface": "pipelines.createPipelineFromTemplate",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.enableExecutionContextSupport",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.createPipelineFromTemplate"
        }
      }
    },
    "/pipelines/{name}/execution-context": {
      "patch": {
        "description": "Assign a pipeline excution context by ID or name and payload provided, updated pipeline in response.",
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "pipelineExecutionContextAssign",
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "executionContextId": {
                    "type": "string",
                    "description": "executionContextId (Id or Name   required) "
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update of a pipeline execution context.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                }
              }
            }
          },
          "404": {
            "description": "Failed update find non existing pipeline.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipelineError"
                }
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipeline-execution-context-assign",
        "summary": "Assign a pipeline execution context by ID or name and param body",
        "x-sdk-interface": "executionContexts.assign",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "abac": true,
              "resource": "pipeline",
              "action": "assign",
              "abacOptions": [
                {
                  "resource": "pipeline"
                },
                {
                  "resource": "execution-context",
                  "identifiersLocation": "body.executionContextId"
                }
              ]
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "execution-context.assign"
        }
      },
      "delete": {
        "description": "Delete assignment of pipeline excution context by ID or name and payload provided, updated pipeline in response.",
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "pipelineExecutionContextUnassign",
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful remove the assignment of a pipeline execution context.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline"
                }
              }
            }
          },
          "404": {
            "description": "Failed to find pipeline for unassign.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipelineError"
                }
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipeline-execution-context-unassign",
        "summary": "Unassign a pipeline execution context by ID or name",
        "x-sdk-interface": "executionContexts.unassign",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "execution-context.unassign"
        }
      }
    },
    "/pipelines/{name}/preview-run-input": {
      "get": {
        "description": "Internal endpoint",
        "summary": "Get a preview of input (variables and options) for a pipeline execution",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-preview-run-input",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "query",
            "name": "trigger",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Trigger name/id"
          }
        ],
        "x-sdk-interface": "pipelines.preview-run-input",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.previewRunInput"
        }
      }
    },
    "/pipelines/{name}/triggers/{triggerId}/verify": {
      "post": {
        "description": "Internal endpoint",
        "summary": "Verify pipeline trigger",
        "operationId": "pipelines-verify-trigger",
        "x-sdk-interface": "pipelines.verifyTrigger",
        "tags": [
          "pipelines"
        ],
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Trigger id",
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.verifyPipelineTrigger"
        }
      }
    },
    "/pipelines/{name}/extractVariables": {
      "get": {
        "description": "Internal endpoint",
        "summary": "Extract variables",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-extract-variables",
        "parameters": [
          {
            "in": "query",
            "name": "yamlURL",
            "required": true,
            "description": "url to retrieve yaml from",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "pipeline name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "pipelines.extractVariables",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.extractVariables"
        }
      }
    },
    "/pipelines/{name}/volume-image": {
      "get": {
        "description": "Internal endpoint",
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-volume-image",
        "summary": "Get volume image",
        "x-sdk-interface": "pipelines.getVolumeImage",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getPipelineVolumeImage"
        }
      }
    },
    "/views/": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by type of view"
          },
          {
            "name": "groupKey",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by groupKey"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          }
        ],
        "operationId": "views-list",
        "summary": "List",
        "x-sdk-interface": "views.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllAccountViews"
        }
      },
      "post": {
        "x-action": "createView",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "operationId": "views-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "views.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.createView"
        }
      }
    },
    "/views/tags": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [],
        "operationId": "views-list-tags",
        "summary": "List tags",
        "x-sdk-interface": "views.listTags",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllAccountViewsTags"
        }
      }
    },
    "/views/{name}": {
      "get": {
        "parameters": [
          {
            "description": "Name of view",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "operationId": "views-get",
        "summary": "Get",
        "x-sdk-interface": "views.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getViewByNameOrId"
        }
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updateView",
        "parameters": [
          {
            "description": "Name of view",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "tags": [
          "views"
        ],
        "operationId": "views-replace",
        "summary": "Replace",
        "x-sdk-interface": "views.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.replaceViewByName"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deleteView",
        "parameters": [
          {
            "description": "Name of view",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "operationId": "views-delete",
        "summary": "Delete",
        "x-sdk-interface": "views.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.deleteViewByName"
        }
      }
    },
    "/views/types/metadata": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [],
        "operationId": "views-type-list",
        "summary": "List types",
        "x-sdk-interface": "views.type.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllTypes"
        }
      }
    },
    "/views/types/names": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [],
        "operationId": "views-typeNames-list",
        "summary": "List types names",
        "x-sdk-interface": "views.typesNames.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllTypesNames"
        }
      }
    },
    "/views/types/{type}/fields": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [
          {
            "description": "Type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "views-typeFields-list",
        "summary": "List type fields",
        "x-sdk-interface": "views.typeFields.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllTypeFields"
        }
      }
    },
    "/views/types/{type}/fields/{field}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [
          {
            "description": "Type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Field",
            "in": "path",
            "name": "field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "views-TypeFieldValues-list",
        "summary": "List type field values",
        "x-sdk-interface": "views.typeFieldValues.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllAccountTypeFieldValues"
        }
      }
    },
    "/step-types": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id or name"
          },
          {
            "in": "query",
            "name": "official",
            "schema": {
              "type": "string"
            },
            "description": "Filter only official step-types"
          },
          {
            "in": "query",
            "name": "freeText",
            "schema": {
              "type": "string"
            },
            "description": "Filter by name, description or tags"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by a specific category"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Filter by a specific tag"
          },
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "string"
            },
            "description": "Filter only public step-types"
          },
          {
            "in": "query",
            "name": "private",
            "schema": {
              "type": "string"
            },
            "description": "Filter only private step-types"
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "string",
              "enum": [
                "graduated",
                "incubating"
              ]
            },
            "description": "Filter by stage"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          }
        ],
        "operationId": "steps-list",
        "summary": "List",
        "x-sdk-interface": "steps.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getSteps"
        }
      },
      "post": {
        "x-action": "createStep",
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "steps.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.createStep"
        }
      }
    },
    "/step-types/sitemap.xml": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-sitemap"
        ],
        "parameters": [
        ],
        "operationId": "steps-sitemap",
        "summary": "List",
        "x-hide": true,
        "x-sdk-interface": "steps.sitemap",
        "x-endpoint": {
          "isEndpoint": false,
          "preMiddleware": [
            "auth.isAuthenticatedOrAnonymous"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getSitemap"
        }
      }
    },
    "/step-types/{name}": {
      "get": {
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-get",
        "summary": "Get",
        "x-sdk-interface": "steps.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getStepByNameOrId"
        }
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updateStep",
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-replace",
        "summary": "Replace",
        "x-sdk-interface": "steps.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.replaceStepByName"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deleteStep",
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-delete",
        "summary": "Delete",
        "x-sdk-interface": "steps.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.deleteStepByName"
        }
      }
    },
    "/step-types/{name}/versions": {
      "get": {
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-get-version",
        "summary": "Get Versions",
        "x-sdk-interface": "steps.getStepVersions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getStepVersions"
        }
      }
    },
    "/gitops/filters": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-get-app-filter-values",
        "summary": "Get",
        "x-sdk-interface": "environments-v2.get-app-filter-values",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.filter.getAppFilterValues"
        }
      }
    },
    "/environments-v2": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id or name"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "isEnvironment",
            "schema": {
              "type": "string"
            },
            "description": "If isEnvironment == false - you will get only argo envs"
          }
        ],
        "operationId": "environments-v2-list",
        "summary": "List",
        "x-sdk-interface": "environments-v2.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "environments-v2.list"
        }
      },
      "post": {
        "x-action": "create",
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "environments-v2.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "environments-v2.create"
        }
      }
    },
    "/environments-v2/activity/{id}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Id of activity",
            "required": true
          }
        ],
        "operationId": "environments-v2-getActivityById",
        "summary": "List",
        "x-sdk-interface": "environments-v2.getActivityById",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.activity.getActivityById"
        }
      }
    },
    "/environments-v2/{name}/kubernetes/statistic": {
      "get": {
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-get-statistic",
        "summary": "Get summary",
        "x-sdk-interface": "environments-v2.getKubernetesEnvStatistic",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "environments-v2.getKubernetesEnvStatistic"
        }
      }
    },
    "/environments-v2/argo/metadata": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2.updateActivityMetadata",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update argocd activity metadata",
        "parameters": [
        ],
        "x-sdk-interface": "environments-v2.updateActivityMetadata",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.activity.updateActivityMetadata"
        }
      }
    },
    "/environments-v2/{name}": {
      "get": {
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-get",
        "summary": "Get",
        "x-sdk-interface": "environments-v2.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "environments-v2.get"
        }
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "replace",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-replace",
        "summary": "Replace",
        "x-sdk-interface": "environments-v2.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "environments-v2.replace"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "remove",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-remove",
        "summary": "Delete",
        "x-sdk-interface": "environments-v2.remove",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "environments-v2.remove"
        }
      }
    },
    "/environments-v2/{name}/update": {
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "replace",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-update",
        "summary": "Replace",
        "x-sdk-interface": "environments-v2.update",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "environments-v2.update"
        }
      }
    },
    "/environments-v2/{name}/reset/new": {
      "post": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "replace",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-reset-new",
        "summary": "Replace",
        "x-sdk-interface": "environments-v2.reset.new",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.resetNew"
        }
      }
    },
    "/environments-v2/{name}/chart": {
      "get": {
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "The start date for the chart. Must be used together with `endDate`"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "The end date for the chart. Must be used together with `startDate`"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "type": "string",
                      "format": "date",
                      "description": "Date of the data block"
                    },
                    "rollouts": {
                      "type": "array",
                      "description": "Rollouts of day",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "format": "ObjectId",
                            "description": "Rollout id"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of rollout"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Time of creation of rollout"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "context": {
                      "type": "object",
                      "description": "Context of error",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Name of environment"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-getChart",
        "summary": "Get",
        "x-sdk-interface": "environments-v2.getChart",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.chart.getChart"
        }
      }
    },
    "/environments-v2/{environmentName}/activity/{activityName}": {
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-update-activity",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update environments-v2 activity by name",
        "parameters": [
          {
            "in": "path",
            "name": "environmentName",
            "description": "Environment name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "activityName",
            "description": "Activity name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "environments-v2.update-activity-by-name",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.activity.updateActivityByName"
        }
      }
    },
    "/environments-v2/{name}/rollback": {
      "post": {
        "x-action": "post",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-rollback",
        "summary": "Rollback argo environment",
        "parameters": [
          {
            "description": "Application id",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
         "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deploymentId": {
                    "type": "number",
                    "description": "History id of target rollout"
                  },
                  "contextName": {
                    "type": "string",
                    "description": "Name of gitops integration context"
                  },
                  "applicationName": {
                    "type": "string",
                    "description": "Name of gitops application"
                  }
                }
              }
            }
          }
        },
        "x-sdk-interface": "environments-v2.argo.rollback",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "gitops",
              "action": "rollback",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.rollback.rollback"
        }
      }
    },
    "/gitops/application": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "gitops"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id or name"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "isEnvironment",
            "schema": {
              "type": "string"
            },
            "description": "If isEnvironment == false - you will get only argo envs"
          }
        ],
        "operationId": "gitops-application",
        "summary": "List",
        "x-sdk-interface": "gitops-application.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.list"
        }
      },
      "post": {
        "x-action": "create",
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "gitops-application"
        ],
        "operationId": "gitops-application-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "gitops-application.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.create"
        }
      }
    },
    "/gitops/application/{name}": {
      "get": {
        "description": "Get information about gitops application",
        "parameters": [
          {
            "description": "Application id",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "spec": {
                      "type": "object",
                      "properties": {
                        "context": {
                          "type": "string",
                          "description": "Name of gitops integration context"
                        },
                        "application": {
                          "type": "string",
                          "description": "Name of gitops application"
                        },
                        "activities": {
                          "properties": {
		              "docs": {
		              	  "type": "array",
		                  "items": {
				      "type": "object",
				      "properties": {
				        "historyId": {
				          "type": "string",
				          "description": "Id of deployment (used for rollbacks)"
				        }
				      }
				    }
		             }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "environments-v2",
          "gitops"
        ],
        "operationId": "gitops-application-get",
        "summary": "Get",
        "x-sdk-interface": "gitops-application.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.get"
        }
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "replace",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "gitops-application"
        ],
        "operationId": "gitops-application-replace",
        "summary": "Replace",
        "x-sdk-interface": "gitops-application.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.replace"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "remove",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "gitops-application"
        ],
        "operationId": "gitops-application-remove",
        "summary": "Delete",
        "x-sdk-interface": "gitops-application.remove",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.remove"
        }
      }
    },
    "/gitops/application/{name}/update": {
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "replace",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "gitops-application"
        ],
        "operationId": "gitops-application-update",
        "summary": "Replace",
        "x-sdk-interface": "gitops-application.update",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.update"
        }
      }
    },

    "/gitops/argocd/{name}/rollbackToStable": {
      "post": {
        "x-action": "post",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "gitops-rollbackToStable",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Rollback argo environment to stable version",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "gitops.argo.rollbackToStable",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "gitops",
              "action": "rollback",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.rollback.rollbackToStable"
        }
      }
    },
    "/environments-v2/{name}/filters": {
      "get": {
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-get-filter-values",
        "summary": "Get",
        "x-sdk-interface": "environments-v2.get-filter-values",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.filter.getFilterValues"
        }
      }
    },
    "/gitops/application/all/tags": {
      "get": {
        "parameters": [
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "gitops-application"
        ],
        "operationId": "gitops-application-get-tags",
        "summary": "Get",
        "x-sdk-interface": "gitops-application.get-tags",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "gitops"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.getAllTags"
        }
      }
    },
    "/gitops/application/{name}/set/tags": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "gitops-application"
        ],
        "operationId": "gitops-application.setTags",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Set tags for environment",
        "parameters": [
          {
            "description": "Name of environment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "gitops-application.setTags",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "gitops"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.application.setTags"
        }
      }
    },
    "/environments-v2/argo/provision": {
      "post": {
        "x-action": "post",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-provision-argo-applications",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Provision argo applications",
        "parameters": [
        ],
        "x-sdk-interface": "environments-v2.argo.provision-applications",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.provisionEnvironment"
        }
      }
    },
    "/argo": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-get-integrations",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Get environments-v2 integrations",
        "parameters": [],
        "x-sdk-interface": "environments-v2.get-integrations",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.getIntegrations"
        }
      },
      "post": {
        "x-action": "create",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-add-provider",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "environments-v2.add-provider",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.addIntegration"
        }
      }
    },
    "/argo/{name}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-get-integration-by-name",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Get environments-v2 integration by name",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "integration name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "environments-v2.get-integration-by-name",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.getIntegrationByName"
        }
      },
      "delete": {
        "x-action": "delete",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-delete-integration",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Delete environments-v2 integration by name",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "integration name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "environments-v2.delete-integration-by-name",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.deleteIntegrationByName"
        }
      },
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "environments-v2-update-integration",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update environments-v2 integration by name",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "integration name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "environments-v2.update-integration-by-name",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo.updateIntegration"
        }
      }
    },
    "/argo/resources/{integrationName}/{type}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "argo-agent-get-resources",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Get argo resources by integration name and type",
        "parameters": [
          {
            "in": "path",
            "name": "integrationName",
            "description": "integration name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "type",
            "description": "type of resource name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "argo-agent.get-resources",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo-agent.getResources"
        }
      }
    },
    "/argo-agent/{integrationName}": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "argo-agent-store-state",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Store argo state by integration name",
        "parameters": [
          {
            "in": "path",
            "name": "integrationName",
            "description": "integration name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "argo-agent.store-state",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo-agent.storeState"
        }
      }
    },
    "/gitops/system/events": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "gitops-system-event",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Send system event about gitops",
        "x-sdk-interface": "gitops.system-event",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo-agent.handleEvent"
        }
      }
    },
    "/gitops/environment/{environmentId}/resources": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "gitops-get-resources",
        "summary": "Get resources list for activity",
        "parameters": [
          {
            "in": "path",
            "name": "environmentId",
            "description": "Environment id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "gitopsResources.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "gitopsResources.get"
        }
      }
    },
    "/argo-agent/{integrationName}/heartbeat": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "argo-agent-heart-beat",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Heart beat for integration",
        "parameters": [
          {
            "in": "path",
            "name": "integrationName",
            "description": "integration name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-sdk-interface": "argo-agent.heartbeat",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo-agent.heartbeat"
        }
      }
    },
    "/argo-runtime": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "argo-runtime-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Argo runtime creation",
        "x-sdk-interface": "argo-runtime.createArgoRuntime",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo-runtime.createArgoRuntime"
        }
      }
    },
    "/argo-runtime/{name}": {
      "delete": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments-v2"
        ],
        "operationId": "argo-runtime-delete",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Argo runtime deletion",
        "parameters": [
          {
            "$ref": "#/components/parameters/name"
          }
        ],
        "x-sdk-interface": "argo-runtime.deleteArgoRuntime",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "environments-v2"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "argo-runtime.deleteArgoRuntime"
        }
      }
    },
    "/projects": {
      "post": {
        "x-action": "createProject",
        "x-audit": {
          "name": {
            "path": "body.projectName",
            "source": "req"
          },
          "id": {
            "path": "id",
            "source": "res"
          }
        },
        "x-sdk-interface": "projects.create",
        "operationId": "projects-create",
        "summary": "Create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createProject"
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.createProject"
        }
      },
      "get": {
        "x-sdk-interface": "projects.list",
        "operationId": "projects-list",
        "summary": "List",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "tags",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.getProjects"
        }
      }
    },
    "/projects/tags": {
      "get": {
        "x-sdk-interface": "projects.getProjectsTags",
        "operationId": "projects-get-projects-tags",
        "summary": "Get projects tags",
        "parameters": [
          {
            "in": "query",
            "name": "tagsNameRegex",
            "description": "regex to filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.getProjectsTags"
        }
      }
    },
    "/projects/name/{name}": {
      "get": {
        "x-sdk-interface": "projects.getByName",
        "operationId": "projects-get-by-name",
        "summary": "Get by name",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "project name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Tags for filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.getProjectByName"
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "x-sdk-interface": "projects.get",
        "operationId": "projects-get",
        "summary": "Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Project response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.getProjectById"
        }
      },
      "patch": {
        "x-action": "updateProject",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-allowed": {
          "body": [
            "projectName",
            "tags",
            "image",
            "metadata"
          ]
        },
        "x-sdk-interface": "projects.patch",
        "operationId": "projects-patch",
        "summary": "Patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                    "projectName",
                    "tags"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.updateProject"
        }
      },
      "delete": {
        "x-action": "deleteProject",
        "x-entityId": {
          "pathId": "params.id"
        },
        "x-sdk-interface": "projects.delete",
        "operationId": "projects-delete",
        "summary": "Delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.deleteProject"
        }
      }
    },
    "/progress/download/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-download",
        "summary": "Download",
        "x-sdk-interface": "progress.download"
      }
    },
    "/progress/download/{id}/services": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-download-servies-logs",
        "summary": "Download",
        "x-sdk-interface": "progress.downloadServicesLogs"
      }
    },
    "/progress/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "description": "force terminate",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-get",
        "summary": "Get",
        "x-sdk-interface": "progress.get"
      },
      "delete": {
        "x-action": "terminateBuild",
        "x-entityId": "params.id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-terminate",
        "summary": "Terminate",
        "x-sdk-interface": "progress.terminate"
      }
    },
    "/providers/github/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-record-response": true,
        "x-overrides": [
          "enrichHeaders",
          "githubCommiter"
        ],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.githubName"
        },
        "x-allowed": {
          "headers": [
            "x-github-event",
            "x-github-delivery"
          ]
        },
        "x-sdk-interface": "providers.sendGithubWebhook",
        "operationId": "providers-send-github-webhook",
        "summary": "Send github webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/gitlab/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": [
          "enrichHeaders",
          "gitlabCommiter"
        ],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.gitlabName"
        },
        "x-allowed": {
          "headers": [
            "x-gitlab-event",
            "x-gitlab-token"
          ]
        },
        "x-sdk-interface": "providers.sendGitlabWebhook",
        "operationId": "providers-send-gitlab-webhook",
        "summary": "Send gitlab webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/bitbucket/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": [
          "enrichHeaders",
          "bitbucketCommiter"
        ],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.bitbucketName"
        },
        "x-allowed": {
          "headers": [
            "x-hook-uuid",
            "x-event-key",
            "x-event-time",
            "x-request-uuid",
            "x-attempt-number"
          ]
        },
        "x-sdk-interface": "providers.sendBitbucketbWebhook",
        "operationId": "providers-send-bitbucket-webhook",
        "summary": "Send bitbucket webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/bitbucket_server/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": [
          "enrichHeaders",
          "bitbucketServerCommiter"
        ],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.bitbucketServerName"
        },
        "x-allowed": {
          "headers": [
            "x-event-key",
            "x-request-id"
          ]
        },
        "x-sdk-interface": "providers.sendBitbucketServerbWebhook",
        "operationId": "providers-send-bitbucket-server-webhook",
        "summary": "Send bitbucket server webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/azure-devops/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": [
          "enrichHeaders",
          "azureDevopsCommiter"
        ],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.azureDevopsName"
        },
        "x-allowed": {
          "headers": [
            "request-id",
            "x-vss-subscriptionid",
            "x-vss-activityid"
          ]
        },
        "x-sdk-interface": "providers.sendAzureDevopsbWebhook",
        "operationId": "providers-send-azure-devops-webhook",
        "summary": "Send azure devops webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/registry/auth/token": {
      "post": {
        "summary": "Generate CFCR token",
        "tags": [
          "registries"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token Created",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "successfulResponse": {
                    "value": "<token>"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "registries-generate-cfcr-token",
        "x-action": "createCFCRToken",
        "x-entityId": {
          "pathName": "body.name"
        },
        "x-sdk-interface": "registries.generateCfcrToken"
      }
    },
    "/registry/auth/token/{registryId}": {
      "delete": {
        "summary": "Delete CFCR token",
        "tags": [
          "registries"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "responses": {
          "200": {
            "description": "Token Deleted",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "successfulResponse": {
                    "value": "Ok"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "operationId": "registries-delete-cfcr-token",
        "x-action": "deleteCFCRToken",
        "x-entityId": "params.id",
        "x-sdk-interface": "registries.deleteCfcrToken"
      }
    },
    "/repos": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "provider": {
                        "type": "string"
                      },
                      "features": {
                        "type": "object",
                        "properties": {
                          "create_branch": {
                            "type": "boolean"
                          },
                          "merge_branch": {
                            "type": "boolean"
                          },
                          "remove_branch": {
                            "type": "boolean"
                          },
                          "pull_request": {
                            "type": "boolean"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      },
                      "private": {
                        "type": "boolean"
                      },
                      "pushed_at": {
                        "type": "string"
                      },
                      "open_issues": {
                        "type": "integer"
                      },
                      "clone_url": {
                        "type": "string"
                      },
                      "ssh_url": {
                        "type": "string"
                      },
                      "owner": {
                        "type": "object",
                        "properties": {
                          "login": {
                            "type": "string"
                          },
                          "avatar_url": {
                            "type": "string"
                          }
                        }
                      },
                      "org": {
                        "type": "string"
                      },
                      "default_branch": {
                        "type": "string"
                      },
                      "permissions": {
                        "type": "object",
                        "properties": {
                          "admin": {
                            "type": "string"
                          }
                        }
                      },
                      "context": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "list of repos by git integration"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-git-list",
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "summary": "List git repos (github, bitbucket, etc)",
        "x-sdk-interface": "repos.git.list"
      }
    },
    "/repos/refresh": {
      "post": {
        "responses": {
          "201": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "refresh-repos-git-list",
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "repos": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "x-sdk-interface": "repos.git.refresh",
        "summary": "Refresh the list of cached git repos for behind firewall git contexts"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-git-get-refresh",
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "x-sdk-interface": "repos.git.lastRefresh",
        "summary": "Get info on the last refresh of the list of cached git repos for behind firewall git contexts"
      }
    },
    "/registries": {
      "get": {
        "summary": "List Registries",
        "tags": [
          "registries"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/registry_res"
                  }
                }
              }
            }
          }
        },
        "operationId": "registries-list",
        "x-sdk-interface": "registries.list"
      },
      "post": {
        "summary": "Create Registry",
        "tags": [
          "registries"
        ],
        "requestBody": {
          "description": "The registry data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registry Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry_res"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 400,
                  "code": "6002",
                  "name": "REGISTRY_VALIDATION_ERROR",
                  "message": "Invalid data provided"
                }
              }
            }
          },
          "500": {
            "description": "The error thrown when registry API returned an error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 500,
                  "code": "3401",
                  "name": "REGISTRY_API_ERROR",
                  "message": "The error thrown when registry API returned an error"
                }
              }
            }
          }
        },
        "operationId": "registries-create",
        "x-action": "createRegistry",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-sdk-interface": "registries.create"
      }
    },
    "/registries/{registryId}": {
      "delete": {
        "summary": "Delete Registry",
        "tags": [
          "registries"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "responses": {
          "200": {
            "description": "Registry Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "id": "6022620d45370a8d0661446c"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 400,
                  "code": "6002",
                  "name": "REGISTRY_VALIDATION_ERROR",
                  "message": "Invalid data provided"
                }
              }
            }
          },
          "404": {
            "description": "A registry could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 404,
                  "code": "6000",
                  "name": "REGISTRY_NOT_FOUND_ERROR",
                  "message": "A registry could not be found."
                }
              }
            }
          }
        },
        "operationId": "registries-delete",
        "x-action": "deleteRegistry",
        "x-entityId": "params.registryId",
        "x-sdk-interface": "registries.delete"
      },
      "patch": {
        "summary": "Update Registry",
        "tags": [
          "registries"
        ],
        "parameters": [
          {
            "description": "The Id of the Registry to update",
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An updated Registry object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registry Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry_res"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 400,
                  "code": "6002",
                  "name": "REGISTRY_VALIDATION_ERROR",
                  "message": "Invalid data provided"
                }
              }
            }
          },
          "404": {
            "description": "A registry could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 404,
                  "code": "6000",
                  "name": "REGISTRY_NOT_FOUND_ERROR",
                  "message": "A registry could not be found."
                }
              }
            }
          },
          "500": {
            "description": "The error thrown when registry API returned an error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 500,
                  "code": "3401",
                  "name": "REGISTRY_API_ERROR",
                  "message": "The error thrown when registry API returned an error"
                }
              }
            }
          }
        },
        "operationId": "registries-patch",
        "x-action": "updateRegistry",
        "x-entityId": {
          "pathId": "params.registryId",
          "pathName": "body.name"
        },
        "x-sdk-interface": "registries.patch"
      }
    },
    "/registries/{registryId}/default": {
      "patch": {
        "summary": "Set Default",
        "description": "Set a Registry as the Default Registry",
        "tags": [
          "registries"
        ],
        "parameters": [
          {
            "description": "The id of the registry to set as default",
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registry Updated",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "successfulResponse": {
                    "value": "true"
                  }
                }
              }
            }
          },
          "404": {
            "description": "A registry could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 404,
                  "code": "6000",
                  "name": "REGISTRY_NOT_FOUND_ERROR",
                  "message": "A registry could not be found."
                }
              }
            }
          }
        },
        "operationId": "registries-default-patch",
        "x-action": "setDefaultRegistry",
        "x-entityId": "params.registryId",
        "x-sdk-interface": "registries.setDefault"
      }
    },
    "/registries/{registryId}/primary": {
      "patch": {
        "summary": "Set Primary",
        "description": "Set a Registry as the Primary Registry",
        "tags": [
          "registries"
        ],
        "parameters": [
          {
            "description": "The id of the registry to set as primary",
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registry Updated",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "successfulResponse": {
                    "value": "true"
                  }
                }
              }
            }
          },
          "404": {
            "description": "A registry could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 404,
                  "code": "6000",
                  "name": "REGISTRY_NOT_FOUND_ERROR",
                  "message": "A registry could not be found."
                }
              }
            }
          }
        },
        "operationId": "registries-primary-patch",
        "x-action": "setPrimaryRegistry",
        "x-entityId": "params.registryId",
        "x-sdk-interface": "registries.setPrimary"
      }
    },
    "/registries/{registryId}/internal": {
      "patch": {
        "summary": "Set Internal",
        "description": "Set a Registry as an Internal Registry",
        "tags": [
          "registries"
        ],
        "parameters": [
          {
            "description": "The id of the registry to set as internal",
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registry Updated",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "successfulResponse": {
                    "value": "true"
                  }
                }
              }
            }
          },
          "404": {
            "description": "A registry could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 404,
                  "code": "6000",
                  "name": "REGISTRY_NOT_FOUND_ERROR",
                  "message": "A registry could not be found."
                }
              }
            }
          }
        },
        "operationId": "registries-internal-patch",
        "x-action": "setInternalRegistry",
        "x-entityId": "params.registryId",
        "x-sdk-interface": "registries.setInternal"
      }
    },
    "/registries/test": {
      "post": {
        "summary": "Test Registry",
        "description": "Tries to connect to the registry, using the provided data and credentials",
        "tags": [
          "registries"
        ],
        "requestBody": {
          "description": "A Registry object to test",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/requestBody"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 401,
                  "code": "102",
                  "name": "AUTHENTICATION_ERROR",
                  "message": "Authentication failedr"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 403,
                  "code": "110",
                  "name": "PERMISSION_DENIED_ERROR",
                  "message": "Permission denied error"
                }
              }
            }
          },
          "404": {
            "description": "Required object not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 404,
                  "code": "101",
                  "name": "NOT_FOUND_ERROR",
                  "message": "Required object not found"
                }
              }
            }
          },
          "500": {
            "description": "Registry API error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "example": {
                  "status": 500,
                  "code": "512",
                  "name": "REGISTRY_API_ERROR",
                  "message": "Registry API error"
                }
              }
            }
          }
        },
        "operationId": "registries-test",
        "x-sdk-interface": "registries.test"
      }
    },
    "/repos/existing": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-list",
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          },
          {
            "in": "query",
            "name": "thin",
            "schema": {
              "type": "string"
            },
            "allowEmptyValue": true,
            "description": "Thin"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "repos.list"
      }
    },
    "/repos/settings/{repoOwner}/{repoName}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/repoOwner"
          },
          {
            "$ref": "#/components/parameters/repoName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-get-settings",
        "summary": "Get settings",
        "x-sdk-interface": "repos.getSettings"
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-git-get-repo",
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Owner"
          },
          {
            "in": "path",
            "name": "repo",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Repo"
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "summary": "Get git repo",
        "x-sdk-interface": "repos.git.get"
      }
    },
    "/runtime-environments": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            },
            "description": "Offset"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "runtimeEnvs.list"
      }
    },
    "/runtime-environments/default/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnv",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Set default",
        "x-sdk-interface": "runtimeEnvs.setDefault"
      }
    },
    "/runtime-environments/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnv",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-update",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Description"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update",
        "x-sdk-interface": "runtimeEnvs.update"
      },
      "delete": {
        "x-action": "deleteRuntimeEnv",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-delete",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            },
            "description": "Force"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "runtimeEnvs.delete"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-get",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Version"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            },
            "description": "History"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "runtimeEnvs.get"
      }
    },
    "/runtime/testit": {
      "post": {
        "x-hide": true,
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "runtime-launch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "repoData": {
                    "properties": {
                      "url": {
                        "properties": {
                          "https": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "repoName": {
                    "type": "string"
                  },
                  "repoOwner": {
                    "type": "string"
                  },
                  "serviceId": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Launch",
        "parameters": [],
        "x-sdk-interface": "runtime.launch"
      }
    },
    "/services": {
      "post": {
        "parameters": [
          {
            "description": "The git context name",
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "deprecated": true,
        "tags": [
          "repos"
        ],
        "operationId": "repos-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "serviceDetails": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "scm": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "owner": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "repos.create"
      }
    },
    "/services/{name}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "repos.get"
      },
      "delete": {
        "x-action": "serviceDeleted",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "repos.delete"
      }
    },
    "/team": {
      "post": {
        "x-action": "createTeam",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "type": "string"
                  },
                  "users": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Team data",
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "teams.create"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "teams.list"
      }
    },
    "/team/{teamId}": {
      "delete": {
        "x-action": "deleteTeam",
        "x-entityId": "params.teamId",
        "x-sdk-interface": "teams.delete",
        "operationId": "teams-delete",
        "summary": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "team id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/team/group/synchronize/name/{name}/type/{type}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-synchronize-client-with-group",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Type"
          },
          {
            "in": "query",
            "name": "access_token",
            "schema": {
              "type": "string"
            },
            "description": "Access token"
          },
          {
            "in": "query",
            "name": "disableNotifications",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Disable send notifications"
          }
        ],
        "summary": "Synchronize client with group",
        "x-sdk-interface": "teams.synchronizeClientWithGroup"
      }
    },
    "/team/{teamId}/{userId}/assignUserToTeam": {
      "put": {
        "x-action": "assignUserToTeam",
        "x-entityId": "params.teamId",
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user id for assign",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-add-user",
        "summary": "Add user",
        "x-sdk-interface": "teams.addUser"
      }
    },
    "/team/{teamId}/renameTeam": {
      "put": {
        "x-action": "renameTeam",
        "x-entityId": {
          "pathId": "params.teamId",
          "pathName": "body.name"
        },
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-rename",
        "summary": "Rename team",
        "x-sdk-interface": "teams.rename"
      }
    },
    "/team/{teamId}/{userId}/deleteUserFromTeam": {
      "put": {
        "x-action": "deleteUserFromTeam",
        "x-entityId": "params.teamId",
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user id for assign",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-remove-user",
        "summary": "Remove user",
        "x-sdk-interface": "teams.removeUser"
      }
    },
    "/team/{userId}/findTeamsByUser": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-list-by-user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User id"
          }
        ],
        "summary": "List by user",
        "x-sdk-interface": "teams.listByUser"
      }
    },
    "/user": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-get",
        "summary": "Get",
        "parameters": [],
        "x-sdk-interface": "users.get"
      },
      "post": {
        "x-action": "updateUser",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.name"
        },
        "operationId": "users-create",
        "x-sdk-interface": "users.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "api"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "user.updateUser"
        },
        "summary": "Create",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "object",
                    "x-secure": true
                  },
                  "activeAccount": {
                    "type": "object",
                    "x-secure": true
                  },
                  "logins": {
                    "type": "object",
                    "x-secure": true
                  },
                  "key": {
                    "type": "object",
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/user/onboarding-status/user": {
      "post": {
        "x-action": "createOnboardingStatusUser",
        "operationId": "users-onboarding-status-create",
        "x-sdk-interface": "users.onboardingStatus.create",
        "summary": "Create onboarding status",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/user/onboarding-status/account": {
      "post": {
        "x-action": "createOnboardingStatusAccount",
        "operationId": "users-onboarding-status-account",
        "x-sdk-interface": "users.onboardingStatus.account",
        "summary": "Onboarding status account",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/user/context": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-notify-context-created",
        "summary": "Notify context created",
        "parameters": [],
        "x-sdk-interface": "auth.notifyContextCreated"
      }
    },
    "/user/changeaccount/{accountId}": {
      "post": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-change-account",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Change account",
        "x-sdk-interface": "users.changeAccount"
      }
    },
    "/user/submitQuestionnaire": {
      "post": {
        "x-action": "submitQuestionnaire",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-submit-questionnaire",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Submit questionare",
        "x-sdk-interface": "users.submitQuestionnaire"
      }
    },
    "/user/renewToken": {
      "post": {
        "x-action": "renewToken",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-renew-token",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Renew user token",
        "x-sdk-interface": "users.renewToken"
      }
    },
    "/user/firebaseAuth": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "description": "progress id",
            "name": "progressId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "firebase"
        ],
        "operationId": "firebase-get-token",
        "summary": "Get token",
        "x-sdk-interface": "firebase.getToken"
      }
    },
    "/version": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-server-version",
        "parameters": [],
        "summary": "Get server version",
        "x-sdk-interface": "version.getServerVersion"
      }
    },
    "/agent/tasks": {
      "get": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAuthenticatedAsRuntime"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.getTasks"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/agent_agentTasks"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-tasks",
        "summary": "Get tasks",
        "deprecated": true,
        "description": "Used by old venona agents to get new tasks",
        "x-sdk-interface": "agent.tasks"
      }
    },
    "/agent/status": {
      "put": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAuthenticatedAsRuntime"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.setRuntimeStatus"
        },
        "responses": {
          "201": {
            "description": "runtime health status updated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/agent_status"
        },
        "operationId": "agent-status",
        "description": "Used by old venona agents to report health status",
        "deprecated": true,
        "summary": "Update agent status",
        "x-sdk-interface": "agent.status"
      }
    },
    "/agent/{agentId}/tasks": {
      "get": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAuthenticatedAsAgent"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.getTasks"
        },
        "parameters": [
          {
            "description": "Id of the agent",
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agent_agentTasks"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-tasks-by-id",
        "description": "Used by the Codefresh Runners to get new tasks",
        "summary": "Get tasks",
        "x-sdk-interface": "agent.tasksById"
      }
    },
    "/agent/{agentId}/status": {
      "put": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAuthenticatedAsAgent"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.setAgentStatus"
        },
        "parameters": [
          {
            "description": "Id of the agent",
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/agent_status"
        },
        "responses": {
          "201": {
            "description": "agent health status updated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-status-by-id",
        "summary": "Update agent status",
        "description": "Used by the Codefresh Runners to report health status",
        "x-sdk-interface": "agent.setAgentStatus"
      }
    },
    "/agents": {
      "post": {
        "x-action": "createAgent",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req",
            "required": true
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.createAgent"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/agents_createdAgent"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/agents_createAgent"
        },
        "summary": "Create agent",
        "description": "Create a new agent",
        "parameters": [],
        "x-sdk-interface": "agent.create"
      },
      "get": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.getAgents"
        },
        "responses": {
          "200": {
            "description": "list of agents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref":"#/components/schemas/agent"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agents-list",
        "summary": "List agents",
        "description": "List all agents",
        "x-sdk-interface": "agents.list"
      }
    },
    "/agents/name/{name}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "agent name"
          }
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.getByName"
        },
        "responses": {
          "200": {
            "description": "Agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref":"#/components/schemas/agent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-byName",
        "summary": "Get agent by Name",
        "description": "Get an agent by name",
        "x-sdk-interface": "agent.byName"
      }
    },
    "/agent/{agentId}": {
      "put": {
        "x-entityId": "params.agentId",
        "x-action": "updateAgent",
        "parameters": [
          {
            "description": "Id of the agent",
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "agent's name"
                  },
                  "runtimes": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "description": "attached runtime environments"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref":"#/components/responses/agents_updatedAgent"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agents-replace",
        "summary": "Update agent",
        "description": "Update an agent",
        "x-sdk-interface": "agents.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.updateAgent"
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "agent id"
          }
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.getAgent"
        },
        "responses": {
          "200": {
            "description": "Agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref":"#/components/schemas/agent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-list",
        "summary": "Get by id",
        "description": "Get an agent by its id",
        "x-sdk-interface": "agent.list"
      },
      "delete": {
        "x-action": "deleteAgent",
        "x-entityId": "params.agentId",
        "x-sdk-interface": "agent.delete",
        "operationId": "agent-delete",
        "summary": "Delete agent",
        "description": "Delete an agent by id",
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "agent id"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent deleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.deleteAgent"
        },
        "tags": [
          "agents"
        ]
      }
    },
    "/runner-installation": {
      "post": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "runner-installation.createNewInstallationProgress"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runner-installation"
        ],
        "operationId": "runner-installation-create",
        "summary": "Create new runner installation progress",
        "x-sdk-interface": "runner-installation.createNewInstallationProgress",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        }
      }
    },
    "/runner-installation/{id}": {
      "get": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "runner-installation.getInstallationProgress"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runner-installation"
        ],
        "operationId": "runner-installation-get",
        "summary": "Get new session of runner installation progress",
        "x-sdk-interface": "runner-installation.getInstallationProgress"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "runner-installation.reportInstallationProgressEvent"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runner-installation"
        ],
        "operationId": "runner-installation-update",
        "summary": "Update runner-installation progress",
        "x-sdk-interface": "runner-installation.reportInstallationProgressEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        }
      }
    },
    "/verification/sms/start": {
      "post": {
        "x-endpoint": {
          "isEndpoint": false,
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "verification.startSmsVerify"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "verification"
        ],
        "operationId": "sms-verification-start",
        "summary": "Start verification process of sending sms code to the provided phone number",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        }
      }
    },
    "/verification/sms/check": {
      "post": {
        "x-endpoint": {
          "isEndpoint": false,
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "verification.checkSmsVerify"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "verification"
        ],
        "operationId": "sms-verification-check",
        "summary": "Check provided verification code",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        }
      }
    }
  },
  "components": {
    "parameters": {
      "accountName": {
        "in": "path",
        "name": "accountName",
        "description": "Account name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardId": {
        "in": "query",
        "name": "boardId",
        "description": "Board ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardIdpath": {
        "description": "ID of a board",
        "in": "path",
        "name": "boardId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardName": {
        "description": "name of a board",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "buildId": {
        "description": "ID of a build",
        "in": "path",
        "name": "buildId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "workflowId": {
        "description": "ID of a build",
        "in": "path",
        "name": "workflowId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "id": {
        "description": "ID of an object",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "name": {
        "description": "name of an object",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sectionId": {
        "description": "ID of section",
        "in": "path",
        "name": "sectionId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "segmentType": {
        "description": "Type of segment",
        "in": "path",
        "name": "segmentType",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "accountId": {
        "description": "accountId of an object",
        "in": "path",
        "name": "accountId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "pipelineId": {
        "description": "pipelineId of an object",
        "in": "path",
        "name": "pipelineId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoName": {
        "description": "repository name",
        "in": "path",
        "name": "repoName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoOwner": {
        "description": "name of owner of repository",
        "in": "path",
        "name": "repoOwner",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "registryId": {
        "description": "Registry Id",
        "in": "path",
        "name": "registryId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sectionName": {
        "description": "name of a section",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "serviceId": {
        "description": "id of a service object",
        "in": "path",
        "name": "serviceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "path_repos_provider": {
        "in": "path",
        "name": "provider",
        "description": "Repo provider",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "path_repos_context": {
        "in": "path",
        "name": "context",
        "description": "Repo context",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "path_selector": {
        "in": "path",
        "name": "selector",
        "description": "Cluster selector",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "path_release_name": {
        "in": "path",
        "name": "releaseName",
        "description": "Release name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "path_reportName": {
        "name": "reportName",
        "in": "path",
        "description": "Name of analytics report",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "path_runningWorkflowId": {
        "description": "Id of a running workflow",
        "in": "path",
        "name": "workflowId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "query_dateRange": {
        "name": "dateRange",
        "in": "query",
        "description": "Time frame to query analytics report",
        "required": false,
        "schema": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      },
      "query_granularity": {
        "name": "granularity",
        "in": "query",
        "description": "Granularity to query analytics report",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query_decryptData": {
        "description": "Decrypt data or not",
        "in": "query",
        "name": "decrypt",
        "schema": {
          "type": "boolean"
        }
      }
    },
    "schemas": {
      "jsonString": {
        "type": "string"
      },
      "jsonBoolean": {
        "type": "boolean"
      },
      "requestBody": {
        "type": "object"
      },
      "jsonSchema": {
        "type": "object"
      },
      "ServerError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "kubernetes_release": {
        "properties": {
          "chart": {
            "type": "string"
          },
          "chartName": {
            "type": "string"
          },
          "chartVersion": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "history": {
            "type": "object"
          },
          "icon": {
            "type": "string"
          },
          "modifiedAt": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "sourcesList": {
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tillerNamespace": {
            "type": "string"
          }
        }
      },
      "image": {
        "properties": {
          "id": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "commit": {
            "type": "string"
          },
          "commitURL": {
            "type": "string"
          },
          "user": {
            "type": "object"
          },
          "account": {
            "type": "string"
          },
          "dockerFile": {
            "type": "string"
          },
          "tags": {
            "type": "object"
          },
          "service": {
            "type": "object"
          },
          "imageDisplayName": {
            "type": "string"
          },
          "internalImageId": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "info": {
            "type": "object"
          },
          "internalName": {
            "type": "string"
          }
        }
      },
      "Json": {
        "type": "object"
      },
      "abac": {
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resource": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "pipeline": {
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          "spec": {
            "type": "object",
            "properties": {
              "triggers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "repo": {
                      "type": "string"
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "pullRequestAllowForkEvents": {
                      "type": "boolean"
                    },
                    "commentRegex": {
                      "type": "string"
                    },
                    "branchRegex": {
                      "type": "string"
                    },
                    "branchRegexInput": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "disabled": {
                      "type": "boolean"
                    },
                    "options": {
                      "type": "object",
                      "properties": {
                        "noCache": {
                          "type": "boolean"
                        },
                        "noCfCache": {
                          "type": "boolean"
                        },
                        "resetVolume": {
                          "type": "boolean"
                        },
                        "enableNotifications": {
                          "type": "boolean"
                        }
                      }
                    },
                    "context": {
                      "type": "string"
                    },
                    "contexts": {
                      "type": "array",
                      "items": {
                        "items": {}
                      }
                    }
                  }
                }
              },
              "steps": {
                "type": "object"
              },
              "stages": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "variables": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "contexts": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "pipelineError": {
        "properties": {
          "status": {
            "type": "number",
            "description": "Http status code"
          },
          "code": {
            "type": "string",
            "description": "Specific status code"
          },
          "name": {
            "type": "string",
            "description": "Name of the error"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "context": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "description": "The Error context"
          }
        }
      },
      "createProject": {
        "properties": {
          "accountId": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "updatedAt": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string"
              }
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "project": {
        "properties": {
          "accountId": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string"
              }
            }
          },
          "image": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "pipelinesNumber": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "favorite": {
            "type": "boolean"
          }
        }
      },
      "trigger-event": {
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "account": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        }
      },
      "trigger": {
        "properties": {
          "event": {
            "type": "string",
            "description": "Event name - i.e. cron:codefresh:0 0/1 * 1/1 * *:test:2cf1fed*****"
          },
          "pipeline": {
            "type": "string",
            "description": "Pipeline id - i.e. 60098c2de8e*****"
          },
          "filters": {
            "type": "object",
            "properties": {
              "tag": {
                "type": "string",
                "description": "Filter tag - i.e. test"
              }
            }
          },
          "event-data": {
            "type": "object",
            "properties": {
              "account": {
                "type": "string",
                "description": "Account id - i.e. 59d37837920****"
              },
              "description": {
                "type": "string",
                "description": "Event description - i.e. JFrog Artifactory repository/chart push event"
              },
              "endpoint": {
                "type": "string",
                "description": "Event endpoint - i.e. https://g.codefresh.io/nomios/helm/jfrog?account=2cf1f*****&secret=Iq7uj9rL******"
              },
              "help": {
                "type": "string",
                "description": "Help message - i.e. JFrog Artifactory webhooks fire when an image is built in, pushed or a new tag is added to ..."
              },
              "secret": {
                "type": "string",
                "description": "Event secret - i.e. Iq7uj9******"
              },
              "status": {
                "type": "string",
                "description": "Event status - i.e. active"
              },
              "type": {
                "type": "string",
                "description": "Event type - i.e. helm"
              },
              "uri": {
                "type": "string",
                "description": "Event uri - i.e. helm:jfrog:repository:chart:push:2cf1f*****"
              }
            }
          }
        }
      },
      "Pipelines": {
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pipeline"
            }
          },
          "count": {
            "type": "number"
          }
        }
      },
      "workflow": {
        "properties": {
          "project": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "serviceId": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "pipelineName": {
            "type": "string"
          },
          "pipelineTriggerId": {
            "type": "string"
          },
          "pipelineTriggerName": {
            "type": "string"
          },
          "triggersCount": {
            "type": "integer",
            "format": "int32"
          },
          "repoOwner": {
            "type": "string"
          },
          "repoName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "finished": {
            "type": "string"
          },
          "delayed": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "pendingLicense": {
            "type": "boolean"
          },
          "progress": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "trigger": {
            "type": "string"
          },
          "triggeredBy": {
            "type": "string"
          },
          "webhookTriggered": {
            "type": "boolean"
          },
          "triggerType": {
            "type": "string"
          },
          "account": {
            "type": "string"
          },
          "autoGeneratedYaml": {
            "type": "boolean"
          },
          "terminationRequest": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "byBuildManager": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "requester": {
                  "type": "string"
                },
                "cause": {
                  "type": "string"
                },
                "workflowStatus": {
                  "type": "string"
                },
                "force": {
                  "type": "boolean"
                }
              }
            }
          },
          "systemEvents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "retriable": {
                  "type": "boolean"
                },
                "_id": {
                  "type": "string"
                },
                "kind": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "step": {
                  "type": "string"
                }
              }
            }
          },
          "hasExtendedYaml": {
            "type": "boolean"
          },
          "exportedVariables": {
            "type": "object",
            "properties": {}
          },
          "pendingApprovals": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "object",
                  "properties": {
                    "timeUnit" : {
                      "type": "string"
                    },
                    "duration": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "finalState": {
                      "type": "string"
                    }
                  }
                },
                "tokens": {
                  "type": "object",
                  "properties": {
                    "cfApiKeyTokenName": {
                      "type": "string"
                    },
                    "engineTokenName": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string"
                },
                "startedAt": {
                  "type": "string"
                },
                "finishedAt": {
                  "type": "string"
                },
                "historySegmentStarted": {
                  "type": "string"
                },
                "historySegmentElectionDate": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          },
          "useDebugger": {
            "type": "boolean"
          },
          "initiator": {
            "type": "string"
          },
          "initiatorAvatar": {
            "type": "string"
          },
          "hasImplicitGitCloneStep": {
            "type": "boolean"
          },
          "packId": {
            "type": "string"
          },
          "keepPVCsForPendingApproval": {
            "type": "boolean"
          },
          "pendingApprovalConcurrencyApplied": {
            "type": "boolean"
          },
          "committer": {
            "type": "string"
          },
          "committerAvatar": {
            "type": "string"
          },
          "eventName": {
            "type": "string"
          },
          "eventLabel": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "branchName": {
            "type": "string"
          },
          "commitMessage": {
            "type": "string"
          },
          "repoURL": {
            "type": "string"
          },
          "commitURL": {
            "type": "string"
          },
          "branchURL": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "pagination": {
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "firstId": {
            "type": "string"
          },
          "lastId": {
            "type": "string"
          },
          "nextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "boolean"
          }
        }
      },
      "workflow_WorkflowDataItem": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Data item ID",
            "example": "602d13fd8d78ab7c4d9d81b2"
          },
          "data": {
            "type": "object",
            "description": "Data item: string if not decrypted and object otherwise",
            "example": {"data": "any data"}
          },
          "metadata": {
            "type": "object",
            "description": "Additional info about data item",
            "properties": {
              "process": {
                "type": "string",
                "example": "602d13fd8d78ab7c4d9d81b2",
                "description": "Id of a build"
              },
              "account": {
                "type": "string",
                "description": "Account id",
                "example": "602d13fd8d78ab7c4d9d81b2"
              },
              "createdAt": { "type": "string",
                "description": "Date created",
                "example": "2021-02-17T13:02:53.905Z"
              }
            }
          }
        }
      },
      "workflow_WorkflowDataItem_request": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "data": {
            "type": "object",
            "description": "Any json you want",
            "example": {"data": "any data"}
          }
        }
      },
      "workflow_WorkflowDataItemList": {
        "type": "object",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Data item ID",
                  "example": "602d1c243c6658717e324d1e"
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional info about data item",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "example": "2021-02-17T13:02:53.905Z"
                    }
                  }
                }
              }
            }
          },
          "count": {
            "type": "number",
            "example": 1
          }
        }
      },
      "agent_agentTasks": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of the task",
              "example": "CreatePod"
            },
            "spec": {
              "type": "object",
              "description": "The payload of the task"
            },
            "metadata": {
              "type": "object",
              "description": "Task metadata",
              "properties": {
                "createdAt": {
                  "type": "string",
                  "example": "2021-02-17T13:02:53.905Z"
                },
                "account": {
                  "type": "string",
                  "example": "6061b5e7917fbc4eca64233b"
                },
                "reName": {
                  "type": "string",
                  "example": "docker-desktop/codefresh"
                },
                "workflow": {
                  "type": "string",
                  "example": "60643cea37626b19b1defef4"
                }
              }
            }
          }
        }
      },
      "agent_status": {
        "type": "object",
        "description": "Agent status",
        "properties": {
          "message": {
            "type": "string",
            "description": "Status as a message",
            "example": "All good"
          }
        }
      },
      "agent": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the agent"
          },
          "name": {
            "type": "string",
            "description": "The name of the agent"
          },
          "account": {
            "type": "string",
            "description": "The account id to which this agent belongs"
          },
          "tokenName": {
            "type": "string"
          },
          "runtimes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "attached runtime environments"
          },
          "status": {
            "type": "object",
            "properties": {
              "healthStatus": {
                "type": "string",
                "example": "healthy"
              },
              "reportedAt": {
                "type": "string",
                "example": "2021-03-31T11:22:01.533Z",
                "description": "last health report data"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "name"
        ]
      },
      "agents_createAgent": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the agent"
          },
          "runtimes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "attached runtime environments"
          }
        },
        "type": "object",
        "required": [
          "name"
        ]
      },
      "base_registry_res": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_registry"
          },
          {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "kind": {
                "enum": [
                  "amazon",
                  "google",
                  "standard"
                ]
              },
              "behindFirewall": {
                "type": "boolean",
                "default": false
              },
              "primary": {
                "type": "boolean",
                "default": false
              },
              "default": {
                "type": "boolean",
                "default": false
              },
              "internal": {
                "type": "boolean",
                "default": false
              },
              "denyCompositeDomain": {
                "type": "boolean",
                "default": false
              },
              "domain": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ecr_res": {
        "title": "Amazon ECR",
        "allOf": [
          {
            "$ref": "#/components/schemas/base_registry_res"
          },
          {
            "type": "object",
            "properties": {
              "accessKeyId": {
                "type": "string"
              },
              "region": {
                "type": "string"
              }
            }
          }
        ],
        "example": {
          "_id": "602bd48b2294b2b7437acca3",
          "name": "my_ecr_registry",
          "provider": "ecr",
          "kind": "amazon",
          "behindFirewall": false,
          "primary": false,
          "default": false,
          "internal": false,
          "denyCompositeDomain": false,
          "domain": "ecr.eu-west-2.amazonaws.com",
          "accessKeyId": "AKRAJKDXNU5V7HBE2QQA",
          "region": "us-west-2"
        }
      },
      "gcr_res": {
        "title": "Google Container Registry",
        "allOf": [
          {
            "$ref": "#/components/schemas/base_registry_res"
          }
        ],
        "example": {
          "_id": "5da82309d43d25dc49c834a37",
          "name": "my_gcr_registry",
          "provider": "gcr",
          "kind": "google",
          "behindFirewall": false,
          "primary": false,
          "default": false,
          "internal": false,
          "denyCompositeDomain": false,
          "domain": "gcr.io"
        }
      },
      "standard_res": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_registry_res"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              }
            },
            "required": [
              "username"
            ]
          }
        ]
      },
      "dockerhub_res": {
        "title": "Docker Hub",
        "description": "A DockerHub Registry",
        "allOf": [
          {
            "$ref": "#/components/schemas/standard_res"
          }
        ],
        "example": {
          "_id": "58ff5ed6cbdd2401293352c3",
          "name": "dockerhub",
          "provider": "dockerhub",
          "kind": "standard",
          "behindFirewall": false,
          "primary": true,
          "default": false,
          "internal": false,
          "denyCompositeDomain": false,
          "domain": "docker.io",
          "username": "username"
        }
      },
      "cfcr_res": {
        "title": "Codefresh Container Registry",
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/standard_res"
          },
          {
            "type": "object",
            "properties": {
              "repositoryPrefix": {
                "type": "string"
              }
            },
            "required": [
              "repositoryPrefix"
            ]
          }
        ],
        "example": {
          "_id": "595c65f0d910610031a47d67",
          "name": "my_cfcr_registry",
          "provider": "cfcr",
          "kind": "standard",
          "behindFirewall": false,
          "primary": false,
          "default": false,
          "internal": false,
          "denyCompositeDomain": false,
          "username": "username",
          "domain": "r.cfcr.io",
          "repositoryPrefix": "some_prefix"
        }
      },
      "bintray_res": {
        "title": "JFrog Bintray",
        "allOf": [
          {
            "$ref": "#/components/schemas/standard_res"
          }
        ],
        "example": {
          "_id": "5f4bb4484c46645931f1b598",
          "name": "my_bintray_registry",
          "provider": "bintray",
          "kind": "standard",
          "behindFirewall": false,
          "primary": false,
          "default": false,
          "internal": false,
          "denyCompositeDomain": true,
          "domain": "some_domain",
          "username": "username"
        }
      },
      "other_res": {
        "title": "Other Registry",
        "allOf": [
          {
            "$ref": "#/components/schemas/standard_res"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "domain": {

              }
            },
            "required": [
              "username",
              "domain"
            ]
          }
        ],
        "example": {
          "_id": "5f4bb4484c46645931f1b598",
          "name": "my_other_registry",
          "provider": "other",
          "kind": "standard",
          "behindFirewall": false,
          "primary": false,
          "default": false,
          "internal": false,
          "denyCompositeDomain": true,
          "domain": "quay.io",
          "username": "username"
        }
      },
      "registry_res": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ecr_res"
          },
          {
            "$ref": "#/components/schemas/dockerhub_res"
          },
          {
            "$ref": "#/components/schemas/gcr_res"
          },
          {
            "$ref": "#/components/schemas/bintray_res"
          },
          {
            "$ref": "#/components/schemas/other_res"
          },
          {
            "$ref": "#/components/schemas/cfcr_res"
          }
        ],
        "discriminator": {
          "propertyName": "provider",
          "mapping": {
            "Amazon ECR": "#/components/schemas/ecr_res",
            "Docker Hub": "#/components/schemas/dockerhub_res",
            "Google Container Registry": "#/components/schemas/gcr_res",
            "JFrog Bintray": "#/components/schemas/bintray_res",
            "Other Registry": "#/components/schemas/other_res",
            "Codefresh Container Registry": "#/components/schemas/cfcr_res"
          }
        }
      },
      "base_registry": {
        "type": "object",
        "discriminator": {
          "propertyName": "provider"
        },
        "properties": {
          "name": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "behindFirewall": {
            "type": "boolean",
            "default": false
          },
          "primary": {
            "type": "boolean",
            "default": false
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "internal": {
            "type": "boolean",
            "default": false
          },
          "denyCompositeDomain": {
            "type": "boolean",
            "default": false
          },
          "domain": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "provider"
        ]
      },
      "ecr": {
        "title": "Amazon ECR",
        "allOf": [
          {
            "$ref": "#/components/schemas/base_registry"
          },
          {
            "type": "object",
            "properties": {
              "accessKeyId": {
                "type": "string"
              },
              "secretAccessKey": {
                "type": "string",
                "x-secure": true
              },
              "region": {
                "type": "string"
              },
              "getCredsFromServiceAccount" : {
                "type": "boolean"
              }
            },
            "required": [
              "region"
            ]
          }
        ],
        "example": {
          "name": "my_ecr_registry",
          "provider": "ecr",
          "accessKeyId": "<access_key_id>",
          "secretAccessKey": "<secret_access_key>",
          "region": "eu-west-1"
        }
      },
      "gcr": {
        "title": "Google Cloud Registry",
        "allOf": [
          {
            "$ref": "#/components/schemas/base_registry"
          },
          {
            "type": "object",
            "properties": {
              "keyFile": {
                "type": "string",
                "x-secure": true
              },
              "domain": {
                "enum": [
                  "gcr.io",
                  "us.gcr.io",
                  "eu.gcr.io",
                  "asia.gcr.io"
                ]
              }
            },
            "required": [
              "keyFile"
            ]
          }
        ],
        "example": {
          "name": "my_gcr_registry",
          "provider": "gcr",
          "domain": "gcr.io",
          "keyFile": "{\"type\":\"service_account\",\"project_id\":\"<project_id>\",\"private_key_id\":\"<private_key_id>\",\"private_key\":\"<private_key>\",\"client_email\":\"<username>@project-id.iam.gserviceaccount.com\",\"client_id\":\"<client_id>\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_x509_cert_url\":\"https://www.googleapis.com/robot/v1/metadata/x509/<username>%40<project_id>.iam.gserviceaccount.com\"}"
        }
      },
      "gar": {
        "title": "Google Artifact Registry",
        "allOf": [
          {
            "$ref": "#/components/schemas/base_registry"
          },
          {
            "type": "object",
            "properties": {
              "keyFile": {
                "type": "string",
                "x-secure": true
              },
              "domain": {
                "enum": [
                  "us",
                  "us-central1",
                  "us-east1",
                  "us-east4",
                  "us-west1",
                  "us-west2",
                  "us-west3",
                  "us-west4",
                  "asia",
                  "asia-east1",
                  "asia-east2",
                  "asia-northeast1",
                  "asia-northeast2",
                  "asia-northeast3",
                  "asia-south1",
                  "asia-southeast1",
                  "asia-southeast2",
                  "australia-southeast1",
                  "europe",
                  "europe-north1",
                  "europe-west1",
                  "europe-west2",
                  "europe-west3",
                  "europe-west4",
                  "europe-west6",
                  "northamerica-northeast1",
                  "southamerica-east1"
                ]
              }
            },
            "required": [
              "keyFile"
            ]
          }
        ],
        "example": {
          "name": "my_gar_registry",
          "provider": "gar",
          "domain": "us-docker.pkg.dev",
          "keyFile": "{\"type\":\"service_account\",\"project_id\":\"<project_id>\",\"private_key_id\":\"<private_key_id>\",\"private_key\":\"<private_key>\",\"client_email\":\"<username>@project-id.iam.gserviceaccount.com\",\"client_id\":\"<client_id>\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_x509_cert_url\":\"https://www.googleapis.com/robot/v1/metadata/x509/<username>%40<project_id>.iam.gserviceaccount.com\"}"
        }
      },
      "standard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_registry"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string",
                "x-secure": true
              }
            },
            "required": [
              "username"
            ]
          }
        ]
      },
      "dockerhub": {
        "title": "Docker Hub",
        "allOf": [
          {
            "$ref": "#/components/schemas/standard"
          },
          {
            "type": "object",
            "required": [
              "password"
            ]
          }
        ],
        "example": {
          "name": "my_dockerhub_registry",
          "provider": "dockerhub",
          "username": "username",
          "password": "<password>"
        }
      },
      "cfcr": {
        "title": "Codefresh Container Registry",
        "allOf": [
          {
            "$ref": "#/components/schemas/standard"
          },
          {
            "type": "object",
            "required": [
              "password"
            ]
          }
        ],
        "example": {
          "name": "my_cfcr_registry",
          "provider": "cfcr",
          "username": "username",
          "password": "<password>"
        }
      },
      "bintray": {
        "title": "JFrog Bintray",
        "allOf": [
          {
            "$ref": "#/components/schemas/standard"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "x-secure": true
              },
              "domain": {
                "type": "string"
              }
            },
            "required": [
              "token",
              "domain"
            ]
          }
        ],
        "example": {
          "name": "my_bintray_registry",
          "provider": "bintray",
          "username": "username",
          "token": "<token>",
          "domain": "some_domain"
        }
      },
      "other": {
        "title": "Other Registries",
        "allOf": [
          {
            "$ref": "#/components/schemas/standard"
          },
          {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string"
              }
            },
            "required": [
              "password",
              "domain"
            ]
          }
        ],
        "example": {
          "name": "my_other_registry",
          "provider": "other",
          "username": "username",
          "password": "<password>",
          "domain": "quay.io"
        }
      },
      "registry": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ecr"
          },
          {
            "$ref": "#/components/schemas/dockerhub"
          },
          {
            "$ref": "#/components/schemas/gcr"
          },
          {
            "$ref": "#/components/schemas/bintray"
          },
          {
            "$ref": "#/components/schemas/other"
          }
        ]
      },
      "execution_context_item": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "execution context id",
            "example": "602d13fd8d78ab7c4d9d81b2"
          },
          "name": {
            "description": "Unique name",
            "type": "string"
          },
          "description": {
            "description" : "Informative description",
            "type": "string"
          },
          "account": {
            "description": "account id",
            "type": "string"
          },
          "accountDefault": {
            "description": "is account default",
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "description": "Date created",
            "example": "2021-02-17T13:02:53.905Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date updated",
            "example": "2021-02-17T13:02:53.905Z"
          },
          "tags": {
            "description": "Tags used for ABAC assignment of that execution context",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "execution_context_assignment_item": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "account"
          },
          "pipelineId": {
            "type": "string",
            "description": "pipelineId"
          },
          "executionContextId": {
            "type": "string",
            "description": "executionContextId"
          }
        }
      }
    },
    "requestBodies": {
      "Json": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/requestBody"
            }
          }
        }
      },
      "create_localCluster": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "type",
                "selector",
                "host",
                "clientCa",
                "serviceAccountToken"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "sat"
                  ]
                },
                "encoding": {
                  "type": "string",
                  "enum": [
                    "utf-8",
                    "base64"
                  ],
                  "default": "utf-8"
                },
                "provider": {
                  "type": "string",
                  "enum": [
                    "local"
                  ],
                  "default": "local"
                },
                "providerAgent": {
                  "type": "string",
                  "enum": [
                    "azure",
                    "aws",
                    "custom",
                    "stackpoint",
                    "ibm",
                    "eks",
                    "digitalOcean"
                  ],
                  "description": "Use `custom` for local cluster"
                },
                "selector": {
                  "type": "string"
                },
                "namespaces": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "host": {
                  "type": "string"
                },
                "clientCa": {
                  "type": "string"
                },
                "serviceAccountToken": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_boardOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_sectionOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "boardId": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "index": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "section": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "updateAccountAccountdetails": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "settings": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "create_favoriteOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "entities": {
                  "type": "string"
                },
                "type": {
                  "enum": [
                    "repo",
                    "pipeline-branch",
                    "step-type"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_annotationOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "entityId": {
                  "type": "string"
                },
                "entityType": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_annotation_manyOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "annotations": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entityId": {
                            "type": "string"
                          },
                          "entityType": {
                            "type": "string"
                          },
                          "annotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "unset": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entityId": {
                            "type": "string"
                          },
                          "entityType": {
                            "type": "string"
                          },
                          "annotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "abac": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "teams": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "resource": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Pipeline": {
        "description": "pipeline",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/pipeline"
            }
          }
        }
      },
      "workflow_WorkflowDataItem": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/workflow_WorkflowDataItem_request"
            }
          }
        },
        "description": "Workflow data item"
      },
      "agent_status": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agent_status"
            }
          }
        },
        "description": "Agent status report"
      },
      "agents_createAgent": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agents_createAgent"
            }
          }
        },
        "description": "An agent to create"
      }
    },
    "responses": {
      "Json": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/requestBody"
            }
          }
        },
        "description": "json"
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerError"
            },
            "example": {
              "status": 400,
              "code": "1004",
              "name": "BAD_REQUEST_ERROR",
              "message": "Bad Request"
            }
          }
        }
      },
      "401": {
        "description": "Authorization information is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerError"
            },
            "example": {
              "status": 401,
              "code": "2401",
              "name": "UNAUTHORIZED_ERROR",
              "message": "Failed to authenticate request because no token was provided"
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerError"
            },
            "example": {
              "status": 500,
              "code": "1001",
              "name": "INTERNAL_SERVER_ERROR",
              "message": "Internal server error"
            }
          }
        }
      },
      "workflow_WorkflowDataItem": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/workflow_WorkflowDataItem"
            }
          }
        },
        "description": "Workflow data item"
      },
      "workflow_WorkflowDataItemList": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/workflow_WorkflowDataItemList"
            }
          }
        },
        "description": "Workflow data item list"
      },
      "agent_agentTasks": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agent_agentTasks"
            }
          }
        },
        "description": "A list of agent tasks"
      },
      "agents_createdAgent": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agent"
            }
          }
        },
        "description": "Agent created"
      },
      "agents_updatedAgent": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agent"
            }
          }
        },
        "description": "Agent updated"
      },
      "execution_context_item": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/execution_context_item"
            }
          }
        },
        "description": "execution_context_item"
      }
    },
    "securitySchemes": {
      "API-key": {
        "in": "header",
        "name": "Authorization",
        "description": "An api key got from: User Settings -> API keys -> Generate",
        "type": "apiKey"
      }
    }
  },
  "x-features": {
    "privateNodes": {
      "name": "privateNodes",
      "description": "Account can add private nodes. need to change the runtime environment and add nodes to account. The minute you change the runtime environment the account stop using the shared machines",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "customKubernetesCluster": {
      "name": "customKubernetesCluster",
      "description": "Account with this feature will be able run pipelines from custom kubernetes cluster and namespace",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelineStepCustomConditions": {
      "name": "pipelineStepCustomConditions",
      "description": "Account with this feature will be able toggle pipeline steps on and off",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "teamsManagement": {
      "name": "teamsManagement",
      "description": "Account can manage teams inside account admin",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": false
    },
    "abac": {
      "name": "abac",
      "description": "Account has ABAC support",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": false
    },
    "ssoManagement": {
      "name": "ssoManagement",
      "description": "Account can manage SSO",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": false
    },
    "kubeMonitor": {
      "name": "kubeMonitor",
      "description": "Kubernetes Monitor",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "groupingBuildsByPipelines": {
      "name": "groupingBuildsByPipelines",
      "description": "Account with this feature will be able to see filtered builds list by pipelines (last build in each pipeline)",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "downloadlog": {
      "name": "downloadlog",
      "description": "Account with this feature will be able to Download Logs from build logs view",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "renameReleasesToEnvironments": {
      "name": "renameReleasesToEnvironments",
      "description": "Rename Releases to Environments in Side Bar menu",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "timeline": {
      "name": "timeline",
      "description": "Show time series graph of the workflow",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "saml": {
      "name": "saml",
      "description": "Saml",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": false
    },
    "newPipelineViewEnabled": {
      "name": "newPipelineViewEnabled",
      "description": "New Pipeline View (wizard & tabs)",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "ldap": {
      "name": "ldap",
      "description": "LDAP SSO configuration",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": false
    },
    "OfflineLogging": {
      "name": "OfflineLogging",
      "description": "New Logging solution",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "hideRepositoriesFeature": {
      "name": "hideRepositoriesFeature",
      "description": "Hide Repositories from SideBar menu",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "newPricing": {
      "name": "newPricing",
      "description": "new price",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "blockDevOpsInsights": {
      "name": "blockDevOpsInsights",
      "description": "blockDevOpsInsights",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": false
    },
    "editorSteps": {
      "name": "editorSteps",
      "description": "Predefined steps for workflow",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "reduceQueryOnBuildView": {
      "name": "reduceQueryOnBuildView",
      "description": "Reduce query on build view",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "buildsPriority": {
      "name": "buildsPriority",
      "description": "Allow to set the build priority for pipeline",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelinesCacheEnabled": {
      "name": "pipelinesCacheEnabled",
      "description": "Enable caching pipeline endpoints result",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "workflowsCacheEnabled": {
      "name": "workflowsCacheEnabled",
      "description": "Enable caching workflow endpoints result",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelineInfoEnable": {
      "name": "pipelineInfoEnable",
      "description": "Enable pipeline info on workflow",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newAgentEntity": {
      "name": "newAgentEntity",
      "description": "Display agent entity on a left sidebar of account settings",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "branchesPagination": {
      "name": "branchesPagination",
      "description": "Branches components will use pagination instead of waiting for the full branches result",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "loggingFilter": {
      "name": "loggingFilter",
      "description": "Logging Filter",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "preventPipelineReload": {
      "name": "preventPipelineReload",
      "description": "Store pipelines in memory for loaded project",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "alcide": {
      "name": "alcide",
      "description": "Security for K8s & DevOps‎",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "nestedBuilds": {
      "name": "nestedBuilds",
      "description": "New builds list view",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "showNestedWorkflows": {
      "name": "showNestedWorkflows",
      "description": "New builds list view with nested builds",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "githubActions": {
      "name": "githubActions",
      "description": "Github Actions in steps",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "debugFeature": {
      "name": "debugFeature",
      "description": "Allow to debug Pipeline",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": true
    },
    "debugBasic": {
      "name": "debugBasic",
      "description": "Feature flag controlled by Payment plan",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": false
    },
    "debugUnlimited": {
      "name": "debugUnlimited",
      "description": "Enable full support of debugger without limit on commands",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "pricing",
      "default": false
    },
    "internalRegistryTags": {
      "name": "internalRegistryTags",
      "description": "Filter tags by internal registry",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newFirebaseTokenFeature": {
      "name": "newFirebaseTokenFeature",
      "description": "Getting new Firebase token on every single entrance to the progress view",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "populateWorkflowWithProject": {
      "name": "populateWorkflowWithProject",
      "description": "Populate pipeline with project data",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "collapseStages": {
      "name": "collapseStages",
      "description": "New Stages in build progress view",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "runtimeSettingsInRunModal": {
      "name": "runtimeSettingsInRunModal",
      "description": "Configure Runtime Environment setting when run pipeline modal",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "removeDoubleSlashInBuildLink": {
      "name": "removeDoubleSlashInBuildLink",
      "description": "Remove double Slash in Build Link",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "launchDarklyManagement": {
      "name": "launchDarklyManagement",
      "description": "Use local feature flags or from launchDarkly system",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "favoriteChanges": {
      "name": "favoriteChanges",
      "description": "! (Not enable without 59-favorites-default-branch migration) ! Enable favourite with support single entityId",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "enrichWorkflowWithSCMData": {
      "name": "enrichWorkflowWithSCMData",
      "description": "Additional information to workflow",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newEventValidationLogicForGitlab": {
      "name": "newEventValidationLogicForGitlab",
      "description": "Enable new event validation logic for gitlab triggers",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "refactoredEventValidationLogic": {
      "name": "refactoredEventValidationLogic",
      "description": "Use refactored trigger events validation during handling webhook",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "helm3": {
      "name": "helm3",
      "description": "Enable support helm3 for clusters",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "helm3NewUIFeature": {
      "name": "helm3NewUIFeature",
      "description": "Enable support new HELM3 UI",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "helmOptimizedQueue": {
      "name": "helmOptimizedQueue",
      "description": "Enable optimized queue for tasker",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "auditing": {
      "name": "auditing",
      "description": "auditing",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "scaleSupport": {
      "name": "scaleSupport",
      "description": "scaleSupport",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "buildsDataRetention": {
      "name": "buildsDataRetention",
      "description": "buildsDataRetention",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "setResourcesRequest": {
      "name": "setResourcesRequest",
      "description": "setResourcesRequest",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newImageQuery": {
      "name": "newImageQuery",
      "description": "newImageQuery",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "stepsPage": {
      "name": "stepsPage",
      "description": "stepsPage",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "showYamlBuilds": {
      "name": "showYamlBuilds",
      "description": "showYamlBuilds",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelinesList": {
      "name": "pipelinesList",
      "description": "pipelinesList",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "helmReleasePromotion": {
      "name": "helmReleasePromotion",
      "description": "helmReleasePromotion",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "kubernetesIntegration": {
      "name": "kubernetesIntegration",
      "description": "kubernetesIntegration",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "onboardingStatusWidget": {
      "name": "onboardingStatusWidget",
      "description": "onboardingStatusWidget",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "helmRollbackButton": {
      "name": "helmRollbackButton",
      "description": "helmRollbackButton",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "helmMonitorFeature": {
      "name": "helmMonitorFeature",
      "description": "helmMonitorFeature",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "provisionDockerMachine": {
      "name": "provisionDockerMachine",
      "description": "provisionDockerMachine",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "azureDevops": {
      "name": "azureDevops",
      "description": "azureDevops",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "digitalOcean": {
      "name": "digitalOcean",
      "description": "digitalOcean",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "auditInAccountSettings": {
      "name": "auditInAccountSettings",
      "description": "auditInAccountSettings",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "parallelBuildView": {
      "name": "parallelBuildView",
      "description": "parallelBuildView",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "testReporting": {
      "name": "testReporting",
      "description": "testReporting",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newPipelineView": {
      "name": "newPipelineView",
      "description": "newPipelineView",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "environments": {
      "name": "environments",
      "description": "environments",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "googleCloudStorageFeature": {
      "name": "googleCloudStorageFeature",
      "description": "googleCloudStorageFeature",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "zendeskSupport": {
      "name": "zendeskSupport",
      "description": "zendeskSupport",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newAnnotationsApi": {
      "name": "newAnnotationsApi",
      "description": "newAnnotationsApi",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "servicesLogs": {
      "name": "servicesLogs",
      "description": "servicesLogs",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "imagePerRegistry": {
      "name": "imagePerRegistry",
      "description": "imagePerRegistry",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelineTriggers": {
      "name": "pipelineTriggers",
      "description": "pipelineTriggers",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelineNewSettingsExternalRes": {
      "name": "pipelineNewSettingsExternalRes",
      "description": "pipelineNewSettingsExternalRes",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "gitIntegration": {
      "name": "gitIntegration",
      "description": "gitIntegration",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newTriggerBranchFilterFeature": {
      "name": "newTriggerBranchFilterFeature",
      "description": "newTriggerBranchFilterFeature",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "showHideFormattingSymbols": {
      "name": "showHideFormattingSymbols",
      "description": "showHideFormattingSymbols",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "externalResources": {
      "name": "externalResources",
      "description": "externalResources",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "emailDomainManagement": {
      "name": "emailDomainManagement",
      "description": "emailDomainManagement",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "disableMonitorEvents": {
      "name": "disableMonitorEvents",
      "description": "disableMonitorEvents",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "ignoreIDPErrorsInWorkflowUser": {
      "name": "ignoreIDPErrorsInWorkflowUser",
      "description": "ignoreIDPErrorsInWorkflowUser",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "embeddedStepCredentials": {
      "name": "embeddedStepCredentials",
      "description": "Credentials specified in yml binds to step, not to account",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "advancedYamlValidation": {
      "name": "advancedYamlValidation",
      "description": "Prints new errors and warnings when validate yaml pipeline",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "welcomeScreen": {
      "name": "welcome screen",
      "description": "Shows a new welcome screen for trial users",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "multiplePushForBitbucket": {
      "name": "multiplePushForBitbucket",
      "description": "Support multiple resources push for bitbucket",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "githubPackageMigration": {
      "name": "githubPackageMigration",
      "description": "Github npm package changed from deprecated to new one",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "removalOfRegistryStep1": {
      "name": "removal of registry step 1",
      "description": "Removal of registry step 1 required changes",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "removalOfCFCR": {
      "name": "Removal of CFCR",
      "description": "Exposure of removal of CFCR elements. Will be available only if the account has CFCR enabled (the account was provisioned with CFCR)",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "CFCRProvisioning": {
      "name": "CFCR Provisioning",
      "description": "Enable provisioning of CFCR during account creation",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "internalRegistryFeature": {
      "name": "internalRegistryFeature",
      "description": "Ability to set Internal Registry",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newYamlFromRepoView": {
      "name": "newYamlFromRepoView",
      "description": "Refactore yaml from repo view",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "secretStore": {
      "name": "Secret Store",
      "description": "Support integration with secret store",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "executeNewImageModelLogic": {
      "name": "execute new image model logic",
      "description": "Enable new image model write operations on engine events related to build",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "relyOnNewImageModelLogic": {
      "name": "rely on new image model logic",
      "description": "Gather tags for images from registry images",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "disableOldImageModelLogic": {
      "name": "disable old image model logic",
      "description": "Disable updating tags for old images collection",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "kubeConfigUsingStream": {
      "name": "kubeConfig stream",
      "description": "Transfer kubeConfig to dind using stream instead of env",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "helmRepositoriesOnboarding": {
      "name": "Helm Repositories Onboarding",
      "description": "Helm Repositories Onboarding",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "dindPodRequestsEqualLimits": {
      "name": "dind pod requests equal to limits",
      "description": "In case with this feature flag, requests will be equals to limits",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "kubernetesDefinedNamespaces": {
      "name": "Kubernetes defined namespaces",
      "description": "Ability to define namespace while adding Cluster",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "engineHealthChecks": {
      "name": "Engine health checks",
      "description": "The engine will perform health checks that will be reported to the api",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "googleGitIntegration": {
      "name": "Google GIT integration",
      "description": "Google GIT integration",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "multipleRegistries": {
      "name": "multipleRegistries",
      "description": "multipleRegistries",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "deleteAccount": {
      "name": "Delete account",
      "description": "Delete account",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "logMasking": {
      "name": "Log Masking",
      "description": "Mask secrets that are printed in build logs",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "minioIntegration": {
      "name": "Minio Integration",
      "description": "Minio [https://min.io/]",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "dockerNewIntegration": {
      "name": "Docker new integration",
      "description": "Docker new integration",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "gitCloneSSH": {
      "name": "gitCloneSSH",
      "description": "Option to set SSH git clone for git integration",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "useSecondsInWorkflow": {
      "name": "useSecondsInWorkflow",
      "description": "Use seconds for CF_BUILD_TIMESTAMP workflow variable",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "githubApp": {
      "name": "Github App",
      "description": "New GIT Github App integration",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "servicesBehindFirewall": {
      "name": "Services page with behindFirewall cluster",
      "description": "Services page with behindFirewall cluster",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "keycloakSso": {
      "name": "Keycloak SSO",
      "description": "Keycloak SSO",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "showHybrid": {
      "name": "Reveal the hybrid pack to users",
      "description": "Reveal the hybrid pack to users",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "environmentsV2Flag": {
      "name": "Environments V2",
      "description": "Environments V2 flag",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newHelpCenterFeature": {
      "name": "newHelpCenterFeature",
      "description": "Redesign help center",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "argoCdFlag": {
      "name": "Argo CD",
      "description": "Environments V2 flag",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "argoCdGraphFlag": {
      "name": "Argo CD Graph",
      "description": "Argo CD Graph",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelineTemplatesFlag": {
      "name": "pipelineTemplatesFlag",
      "description": "Enable pipeline templates feature",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelineEnforcementsFlag": {
      "name": "pipelineEnforcementsFlag",
      "description": "Enable pipeline enforcements feature",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "pipelineWhiteListFlag": {
      "name": "pipelineWhiteListFlag",
      "description": "Enable pipeline whitelist settings feature",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "pipelinePvcFlag": {
      "name": "pipelinePvcFlag",
      "description": "Enable keep PVCs for pending approval",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "frontEndCache": {
      "name": "frontEndCache",
      "description": "front End Cache for API",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "runPlannerInEngine": {
      "name": "runPlannerInEngine",
      "description": "run the planner component in the engine",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "relativeComposeVolume": {
      "name": "relativeComposeVolume",
      "description": "Support mapping './:TARGET' in docker-compose services [SAAS-7880]",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "fetchYamlInEngine": {
      "name": "fetchYamlInEngine",
      "description": "get the pipeline yaml in the engine",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "promoteHelm3": {
      "name": "promoteHelm3",
      "description": "Promote Helm 3",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "refactoredConcurrencyLimitsFilter": {
      "name": "refactoredConcurrencyLimitsFilter",
      "description": "Enable usage of refactored concurrency limit filter",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "bitbucketUseOwnerName": {
      "name": "bitbucketUseOwnerName",
      "description": "Use workspace slug instead of uuid where it is possible",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "inactive": {
      "name": "inactive",
      "description": "Set time duration for log out",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "stringifyWorkflowVars": {
      "name": "stringifyWorkflowVars",
      "description": "Stringifying of variables in helm_install and helm_promote flows to avoid dots in keys",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "fixStepExtenderFailFast": {
      "name": "fixStepExtenderFailFast",
      "description": "Fix correct passing of fail_fast property on execution of StepExtender",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "newBuildDesign": {
      "name": "newBuildDesign",
      "description": "New builds design",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "pushService": {
      "name": "pushService",
      "description": "send event to the web app from the backend using web socket",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "gitopsIsPaid": {
      "name": "gitopsIsPaid",
      "description": "Marks account as if user paid for gitops",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "pricing",
      "default": true
    },
    "buildIntermediateImages": {
      "name": "buildIntermediateImages",
      "description": "builds intermediate images for argocd activity",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pendingApprovalConcurrencyApplied": {
      "name": "pendingApprovalConcurrencyApplied",
      "description": "Applies concurrency limits of pipeline on pending approval workflows",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "pricing",
      "default": true
    },
    "showCommitterInsteadAdmin": {
      "name": "showCommitterInsteadAdmin",
      "description": "Select user based on committer name",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "showUsageTab": {
      "name": "showUsageTab",
      "description": "display usage tab",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "cloneDefaultBranchInsteadOfMaster": {
      "name": "cloneDefaultBranchInsteadOfMaster",
      "description": "This will cause git clone to clone from the repository default branch instead of master when revision is not specified",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "useLoggedInAdminAudit": {
      "name": "useLoggedInAdminAudit",
      "description": "add in audit, admin who logged as user",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "buildsPointerPagination": {
      "name": "buildsPointerPagination",
      "description": "new builds list pointer pagination",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "concurrencyRecommendationFlag": {
      "name": "concurrencyRecommendationFlag",
      "description": "Display concurrency usage recommendation on a chart",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "approveAdminRequestToLoginIntoUserAccount": {
      "name": "approveAdminRequestToLoginIntoAccount",
      "description": "Enable approve admin request to login into user account",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "platformAnalytics": {
      "name": "platformAnalytics",
      "description": "Enable platform analytics charts",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "gitopsDashboard": {
      "name": "gitopsDashboard",
      "description": "Enable Gitops dashboard tab",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "browserTitleFlag": {
      "name": "browserTitleFlag",
      "description": "Display different browser title on all pages",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "defaultAccountSso": {
      "name": "defaultAccountSso",
      "description": "Default sso for account (affect invitation users)",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "aksSpIntegrationFlag": {
      "name": "aksSpIntegrationFlag",
      "description": "Azure AKS integration with Service Principal ID",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "forceRefresh": {
      "name": "forceRefresh",
      "description": "a flag that its entire purpose is to be able to turn it on/off to make browsers restart after 3 minutes of the change",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "hashicorpVaultFlag": {
      "name": "hashicorpVaultFlag",
      "description": "Secret store Hashicorp Vault integration",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "ssoGroupSync": {
      "name": "ssoGroupSync",
      "description": "Synchronize groups & users from sso provider",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "prGlobModifiedFiles": {
      "name": "prGlobModifiedFiles",
      "description": "Enable modified files by GLOB for PR events in triggers. The FF was introduced to not brake existing usage of modified files filter in triggers with push and pr events enabled.",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "disableWelcomeScreen": {
      "name": "disableWelcomeScreen",
      "description": "Disables the welcome screen",
      "launchDarklySource": false,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "welcomeScreenInvitedUsers": {
      "name": "disableWelcomeScreen",
      "description": "New welcome screen Invited users",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "atlassianFlag": {
      "name": "atlassianFlag",
      "description": "Integration with Atlassian Jira, sending deployments data to issues",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "helmDeprecation": {
      "name": "helmDeprecation",
      "description": "HELM 2 deprecation",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "deprecateCookie": {
      "name": "deprecateCookie",
      "description": "Deprecate old cf-access-token cookie passed from ui",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "creditsPricingModelFlag": {
      "name": "creditsPricingModelFlag",
      "description": "Credits pricing model",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "gitopsProvidersSeparation": {
      "name": "gitopsProvidersSeparation",
      "description": "Separation between argocd and codefresh gitops",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "gitopsAppOfApps": {
      "name": "gitopsAppOfApps",
      "description": "Ability to handle argocd app of apps application type",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "gitopsEnableCurrentState": {
      "name": "gitopsEnableCurrentState",
      "description": "Enable the current state of gitops application",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "codecovFlag": {
      "name": "codecovFlag",
      "description": "Enable the codecov integration",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "generalScopeAclEnabled": {
      "name": "generalScopeAclEnabled",
      "description": "Enable acl with scope 'general' for all endpoints",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "preventProgressBlinkingFlag": {
      "name": "preventProgressBlinkingFlag",
      "description": "Fix bug with blinking progress component after build restart",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "freestyleRegistryContext": {
      "name": "freestyleRegistryContext",
      "description": "Use the 'registry_context' field to add a registry domain to the step image",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "forbidDecrypt": {
      "name": "forbidDecrypt",
      "description": "If set, users will not be able to decrypt secrets",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "allowUserUpdateBoards": {
      "name": "allowUserUpdateBoards",
      "description": "If set, users without admin rights can update helm board environments",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "calcHelmReleaseCacheLock": {
      "name": "calcHelmReleaseCacheLock",
      "description": "Lock calcHelmReleaseCache",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "helmRepositoryBehindFirewall": {
      "name": "helmRepositoryBehindFirewall",
      "description": "Token for helm repository will be retrieved in the engine",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "azureManagedIdentity": {
      "name": "azureManagedIdentity",
      "description": "Enables azure managed identity feature",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "executionContext": {
      "name": "executionContext",
      "description": "Use execution context instead of admin user to run pipelines on webhook calls",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "executionContextFeature": {
        "name": "executionContextFeature",
        "description": "UI Execution Context page in the account settings",
        "launchDarklySource": true,
        "kind": "boolean",
        "type": "regular",
        "default": false
    },
    "serviceAccountFeature": {
      "name": "serviceAccountFeature",
      "description": "UI service account fields",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "gitopsManagerEnabled": {
      "name": "gitopsManagerEnabled",
      "description": "Gitops entity separation from pip to new manager",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "gitopsMultipleApps": {
      "name": "gitopsMultipleApps",
      "description": "Gitops entity multiple app support",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "showBuildsForHelmBoard": {
      "name": "showBuildsForHelmBoard",
      "description": "Show BUILDS tab in the Helm Boards View",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "redirectFromSuspendedToDefault": {
      "name": "redirectFromSuspendedToDefault",
      "description": "If account is suspended - redirect to not suspended account",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "marketplaceRegistry": {
      "name": "marketplaceRegistry",
      "description": "Defines the container registry to be used for all public steps and system steps",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "codefreshV2": {
      "name": "codefreshV2",
      "description": "Defines if codefresh 2.0 will be opened",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "codefreshV2NonAdmins": {
      "name": "codefreshV2NonAdmins",
      "description": "Defines if codefresh 2.0 will be opened for all users even if they are not admins",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "useOptimizedRegexp": {
      "name": "useOptimizedRegexp",
      "description": "Use optimized regexp module for image resolver",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "usePendingApprovalConfirmation": {
      "name": "usePendingApprovalConfirmation",
      "description": "Use confirmation modal for pending approval actions",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "sortPipelines": {
      "name": "sortPipelines",
      "description": "Sorting pipelines",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "useAbacForHelmReleasesChartValue": {
      "name": "useAbacForHelmReleasesChartValue",
      "description": "Use abac for helm releases chart value",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "gitopsGraphToTree": {
      "name": "gitopsGraphToTree",
      "description": "convert gitops graph to tree (breaks cycles relations)",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "usersManagementV2": {
      "name": "usersManagementV2",
      "description": "user management page rewritten on angular 2",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "themeToggle": {
      "name": "themeToggle",
      "2.0": true,
      "description": "support ability to toggle between dark and light mode",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "pipelinesFullBuildStatistic": {
      "name": "pipelinesFullBuildStatistic",
      "description": "Show all builds in pipelines list page",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "favoritePipelines": {
      "name": "favoritePipelines",
      "description": "adds ability to mark pipeline as favorite as filter by favorites",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "multipleAzureSP": {
      "name": "multipleAzureSP",
      "description": "enables ability to create AKS and Azure Helm Repository using multiple Service Principals",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "gitopsShowChildRollouts": {
      "name": "gitopsShowChildRollouts",
      "description": "Show child activities in the parent app",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": true
    },
    "azureNestedGroupSync": {
      "name": "azureNestedGroupSync",
      "description": "Enables ability to sync nested groups from Azure AD",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "abacGitContext": {
      "name": "abacGitContext",
      "description": "Use ABAC for Git Contexts",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "credsInArgsForHttpChartRepos": {
      "name": "credsInArgsForHttpChartRepos",
      "description": "set CREDENTIALS_IN_ARGUMENTS to true for http/https charts repositories",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "imageRegexp": {
      "name": "imageRegexp",
      "description": "Use new regexp for searching image during annotation",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "datadog": {
      "name": "datadog",
      "description": "Datadog integration",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    },
    "logThrottle": {
      "name": "logThrottle",
      "description": "Enables improved log throttling in logs terminal component",
      "launchDarklySource": true,
      "kind": "boolean",
      "type": "regular",
      "default": false
    }
  }
}

